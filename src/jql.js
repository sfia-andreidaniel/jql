/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jql = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,28],$V2=[1,15],$V3=[1,27],$V4=[1,21],$V5=[6,28],$V6=[1,43],$V7=[1,51],$V8=[1,52],$V9=[1,44],$Va=[1,45],$Vb=[1,46],$Vc=[1,47],$Vd=[1,48],$Ve=[1,50],$Vf=[1,53],$Vg=[6,25],$Vh=[6,25,28],$Vi=[6,21,25],$Vj=[6,21,25,28],$Vk=[1,61],$Vl=[1,62],$Vm=[50,51],$Vn=[1,71],$Vo=[6,15,28],$Vp=[6,15,28,55],$Vq=[1,84],$Vr=[1,87],$Vs=[1,76],$Vt=[1,77],$Vu=[1,78],$Vv=[1,79],$Vw=[1,80],$Vx=[1,81],$Vy=[1,82],$Vz=[1,83],$VA=[1,85],$VB=[1,86],$VC=[6,15,18,21,25,28,35,52,55,56,63,64,65,66,67,68,69,70,71,72,73,76,82,83],$VD=[6,18,21,25,28,35],$VE=[6,15,18,21,25,28,35,55,56,63,64,65,66,67,68,69,70,71,73,76,82,83],$VF=[1,123],$VG=[1,131],$VH=[1,132],$VI=[6,15,18,21,25,28,35,55,56,64,65,66,67,76,82,83],$VJ=[6,15,18,21,25,28,35,55,56,64,65,66,67,68,69,70,71,76,82,83],$VK=[55,76],$VL=[6,25,28,55],$VM=[1,140],$VN=[1,141],$VO=[6,18,21,25,35,55];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"JQL":3,"REMOTE":4,"Statement":5,"EOF":6,"SelectStatement":7,"UpdateStatement":8,"InsertStatement":9,"DeleteStatement":10,"SelectSingleRowStatement":11,"SELECT":12,"SelectFieldsList":13,"SelectFromTableStatement":14,"FROM":15,"TableReference":16,"SelectWithOptionalWHEREClause":17,"WHERE":18,"Expression":19,"SelectWithOptionalORDERClause":20,"ORDER":21,"BY":22,"OrderByClause":23,"SelectWithOptionalLIMITClause":24,"LIMIT":25,"LimitClause":26,"SelectStatementWithoutUnion":27,"UNION":28,"UpdateStatementBegin":29,"UPDATE":30,"DelayedClause":31,"DELAYED":32,"NUMBER":33,"UpdateAllRowsStatement":34,"SET":35,"UpdateFieldsList":36,"UpdateWithOptionalWHEREStatement":37,"UpdateWithOptionalORDERStatement":38,"UpdateWithOptionalLIMITStatement":39,"InsertStatementBegin":40,"INSERT":41,"IGNORE":42,"INTO":43,"DeleteAllRowsStatement":44,"DELETE":45,"DeleteWithOptionalWHEREClauseStatement":46,"DeleteWithOptionalORDERClauseStatement":47,"DeleteWithOptionalWHEREStatement":48,"DeleteWithOptionalLIMITClauseStatement":49,"IDENTIFIER":50,"ESCAPED_IDENTIFIER":51,"*":52,"SelectFieldEnumeration":53,"SelectField":54,",":55,"AS":56,"UpdateField":57,"=":58,"BOOLEAN":59,"NULL":60,"STRING":61,"!":62,"-":63,"||":64,"&&":65,"==":66,"~=":67,"<=":68,"<":69,">=":70,">":71,"/":72,"+":73,"FunctionCall":74,"(":75,")":76,"BINDING":77,"FunctionCallArgumentsList":78,"RANDOM":79,"OrderByClauseFieldsList":80,"OrderByField":81,"ASC":82,"DESC":83,"$accept":0,"$end":1},
terminals_: {2:"error",4:"REMOTE",6:"EOF",12:"SELECT",15:"FROM",18:"WHERE",21:"ORDER",22:"BY",25:"LIMIT",28:"UNION",30:"UPDATE",32:"DELAYED",33:"NUMBER",35:"SET",41:"INSERT",42:"IGNORE",43:"INTO",45:"DELETE",48:"DeleteWithOptionalWHEREStatement",50:"IDENTIFIER",51:"ESCAPED_IDENTIFIER",52:"*",55:",",56:"AS",58:"=",59:"BOOLEAN",60:"NULL",61:"STRING",62:"!",63:"-",64:"||",65:"&&",66:"==",67:"~=",68:"<=",69:"<",70:">=",71:">",72:"/",73:"+",75:"(",76:")",77:"BINDING",79:"RANDOM",82:"ASC",83:"DESC"},
productions_: [0,[3,3],[3,2],[5,1],[5,1],[5,1],[5,1],[11,2],[14,3],[17,3],[17,1],[20,4],[20,1],[24,3],[24,1],[27,1],[27,1],[7,1],[7,3],[29,2],[29,1],[31,2],[31,1],[34,4],[37,3],[37,1],[38,4],[38,1],[39,3],[39,1],[8,1],[40,2],[40,1],[9,5],[44,3],[46,3],[46,1],[47,4],[47,1],[49,3],[49,1],[10,1],[16,1],[16,1],[13,1],[13,1],[53,1],[53,3],[54,1],[54,3],[54,3],[36,1],[36,3],[36,3],[57,3],[57,3],[19,1],[19,1],[19,1],[19,1],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,1],[19,3],[19,1],[19,1],[19,1],[74,3],[74,4],[78,1],[78,3],[23,1],[23,1],[80,1],[80,3],[81,2],[81,2],[81,1],[26,1],[26,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1];
                                                                 this.$.remote = true;
                                                                 return this.$;
                                                               
break;
case 2:
 this.$ = $$[$0-1];
                                                                 this.$.remote = false;
                                                                 return this.$;
                                                               
break;
case 3: case 4: case 5: case 6: case 10: case 12: case 14: case 15: case 16: case 17: case 25: case 29: case 30: case 38: case 40: case 41:
 this.$ = $$[$0]; 
break;
case 7:
 this.$ = { 
                                                                        op: JQLParser.OP.statement,
                                                                        type: "select",
                                                                        fields: $$[$0]
                                                                    };
                                                               
break;
case 8:
  this.$ = $$[$0-2];
                                                                  this.$.table = $$[$0]
                                                               
break;
case 9: case 24:
 this.$ = $$[$0-2]; 
                                                                 this.$.where = $$[$0];
                                                               
break;
case 11:
 this.$ = $$[$0-3]; 
                                                                 this.$.orderBy = $$[$0];
                                                               
break;
case 13: case 28: case 39:
 this.$ = $$[$0-2];
                                                                 this.$.limit = $$[$0];
                                                               
break;
case 18:
 this.$ = $$[$0-2];
                                                                 this.$.union = $$[$0];
                                                               
break;
case 19:
 this.$ = {
                                                                        op: JQLParser.OP.statement,
                                                                        type: "update",
                                                                        delayed: $$[$0]
                                                                     };
                                                              
break;
case 20:
 this.$ = {
                                                                        op: JQLParser.OP.statement,
                                                                        type: "update"
                                                                     };
                                                              
break;
case 21:
 this.$ = { op: JQLParser.OP.delayed_option, timer: $$[$0] }; 
break;
case 22:
 this.$ = { op: JQLParser.OP.delayed_option, timer: null }; 
break;
case 23:
 this.$ = $$[$0-3];
                                                                this.$.table = $$[$0-2];
                                                                this.$.fields = $$[$0];
                                                              
break;
case 26: case 37:
 this.$ = $$[$0-3];
                                                                 this.$.orderBy = $$[$0];
                                                               
break;
case 31:
 this.$ = { 
                                                                    op: JQLParser.OP.statement, 
                                                                    type: "insert",
                                                                    ignoreDuplicates: true
                                                                 }; 
                                                               
break;
case 32:
 this.$ = {
                                                                    op: JQLParser.OP.statement, 
                                                                    type: "insert"
                                                                 }; 
                                                               
break;
case 33:
 this.$ = $$[$0-4];
                                                                 this.$.table = $$[$0-2];
                                                                 this.$.fields = $$[$0]; 
                                                               
break;
case 34:
 this.$ = {
                                                                    op: JQLParser.OP.statement,
                                                                    type: "delete",
                                                                    table: $$[$0]
                                                                 };
                                                               
break;
case 35:
 this.$ = $$[$0-2];
                                                                 this.$.where = $$[$0];
                                                               
break;
case 36:
 this.$ = $$[$0];
                                                               
break;
case 42:
 this.$ = { op: JQLParser.OP.table_reference, name: $$[$0] }; 
break;
case 43:
 this.$ = { op: JQLParser.OP.table_reference, name: JQLParser.unescapeIdentifier( $$[$0] ) }; 
break;
case 44:
 this.$ = { op: JQLParser.OP.fields_list, "type": "all" }; 
break;
case 45:
 this.$ = { op: JQLParser.OP.fields_list, "type": "enumeration", "fields": $$[$0] }; 
break;
case 46: case 51: case 81: case 85:
 this.$ = [ $$[$0] ]; 
break;
case 47: case 52: case 53: case 82: case 86:
 this.$ = $$[$0-2].concat($$[$0]); 
break;
case 48:
 this.$ = { op: JQLParser.OP.field, literal: JQLParser.createFieldAliasFromExpression($$[$0]),  expression: $$[$0] }; 
break;
case 49:
 this.$ = { op: JQLParser.OP.field, literal: $$[$0],                                            expression: $$[$0-2] }; 
break;
case 50:
 this.$ = { op: JQLParser.OP.field, literal: JQLParser.unescapeIdentifier($$[$0]),              expression: $$[$0-2] }; 
break;
case 54:
 this.$ = { op: JQLParser.OP.update_field, name: $$[$0-2], expression: $$[$0] }; 
break;
case 55:
 this.$ = { op: JQLParser.OP.update_field, name: JQLParser.unescapeIdentifier($$[$0-2]), expression: $$[$0] }; 
break;
case 56:
 this.$ = { op: JQLParser.OP.expression, type: "number",     value: JQLParser.parseNumber( $$[$0] )                }; 
break;
case 57:
 this.$ = { op: JQLParser.OP.expression, type: "boolean",    value: JQLParser.parseBoolean( $$[$0] )               }; 
break;
case 58:
 this.$ = { op: JQLParser.OP.expression, type: "null"                                                          }; 
break;
case 59:
 this.$ = { op: JQLParser.OP.expression, type: "string",     value: JQLParser.parseString( $$[$0] )                }; 
break;
case 60:
 this.$ = { op: JQLParser.OP.expression, type: "unary",      operand: "!",  left: $$[$0]                           }; 
break;
case 61:
 this.$ = { op: JQLParser.OP.expression, type: "unary",      operand: "-",  left: $$[$0]                           }; 
break;
case 62:
 this.$ = { op: JQLParser.OP.expression, type: "logical",    operand: "||", left: $$[$0-2], right: $$[$0]                }; 
break;
case 63:
 this.$ = { op: JQLParser.OP.expression, type: "logical",    operand: "&&", left: $$[$0-2], right: $$[$0]                }; 
break;
case 64:
 this.$ = { op: JQLParser.OP.expression, type: "logical",    operand: "==", left: $$[$0-2], right: $$[$0]                }; 
break;
case 65:
 this.$ = { op: JQLParser.OP.expression, type: "logical",    operand: "~=", left: $$[$0-2], right: $$[$0]                }; 
break;
case 66:
 this.$ = { op: JQLParser.OP.expression, type: "logical",    operand: "<=", left: $$[$0-2], right: $$[$0]                }; 
break;
case 67:
 this.$ = { op: JQLParser.OP.expression, type: "logical",    operand: "<",  left: $$[$0-2], right: $$[$0]                }; 
break;
case 68:
 this.$ = { op: JQLParser.OP.expression, type: "logical",    operand: ">=",  left: $$[$0-2], right: $$[$0]               }; 
break;
case 69:
 this.$ = { op: JQLParser.OP.expression, type: "logical",    operand: ">",  left: $$[$0-2], right: $$[$0]                }; 
break;
case 70:
 this.$ = { op: JQLParser.OP.expression, type: "math",       operand: "*",  left: $$[$0-2], right: $$[$0]                }; 
break;
case 71:
 this.$ = { op: JQLParser.OP.expression, type: "math",       operand: "/",  left: $$[$0-2], right: $$[$0]                }; 
break;
case 72:
 this.$ = { op: JQLParser.OP.expression, type: "math",       operand: "+",  left: $$[$0-2], right: $$[$0]                }; 
break;
case 73:
 this.$ = { op: JQLParser.OP.expression, type: "math",       operand: "-",  left: $$[$0-2], right: $$[$0]                }; 
break;
case 74:
 this.$ = $$[$0];                                                                                                     
break;
case 75:
 this.$ = { op: JQLParser.OP.expression, type: "group",      value: $$[$0-1]                                         }; 
break;
case 76:
 this.$ = { op: JQLParser.OP.expression, type: "identifier", name:  $$[$0]                                         }; 
break;
case 77:
 this.$ = { op: JQLParser.OP.expression, type: "identifier", name:  JQLParser.unescapeIdentifier($$[$0])           }; 
break;
case 78:
 this.$ = { op: JQLParser.OP.expression, type: "binding",    name:  JQLParser.unescapeBindingName($$[$0])          }; 
break;
case 79:
 this.$ = { op: JQLParser.OP.expression, type: "function_call", function_name: $$[$0-2], arguments: []               }; 
break;
case 80:
 this.$ = { op: JQLParser.OP.expression, type: "function_call", function_name: $$[$0-3], arguments: $$[$0-1]               }; 
break;
case 83:
 this.$ = { op: JQLParser.OP.order_by_option, type: "random" } 
break;
case 84:
 this.$ = { op: JQLParser.OP.order_by_option, type: "by_fields", fields: $$[$0] } 
break;
case 87:
 this.$ = { op: JQLParser.OP.order_by_expression, expression: $$[$0-1], direction: 'asc' }; 
break;
case 88:
 this.$ = { op: JQLParser.OP.order_by_expression, expression: $$[$0-1], direction: 'desc' }; 
break;
case 89:
 this.$ = { op: JQLParser.OP.order_by_expression, expression: $$[$0], direction: 'asc' }; 
break;
case 90:
 this.$ = { op: JQLParser.OP.limit_option, limit: JQLParser.parseNumber( $$[$0] ), skip: 0                                }; 
break;
case 91:
 this.$ = { op: JQLParser.OP.limit_option, limit: JQLParser.parseNumber( $$[$0] ), skip: JQLParser.parseNumber( $$[$0-2] )      }; 
break;
}
},
table: [{3:1,4:[1,2],5:3,7:4,8:5,9:6,10:7,11:13,12:$V0,14:25,17:22,20:17,24:12,27:8,29:26,30:$V1,34:23,37:19,38:14,39:9,40:10,41:$V2,44:24,45:$V3,46:20,47:16,48:$V4,49:11},{1:[3]},{5:29,7:4,8:5,9:6,10:7,11:13,12:$V0,14:25,17:22,20:17,24:12,27:8,29:26,30:$V1,34:23,37:19,38:14,39:9,40:10,41:$V2,44:24,45:$V3,46:20,47:16,48:$V4,49:11},{6:[1,30]},{6:[2,3],28:[1,31]},{6:[2,4]},{6:[2,5]},{6:[2,6]},o($V5,[2,17]),{6:[2,30]},{43:[1,32]},{6:[2,41]},o($V5,[2,15]),o($V5,[2,16],{15:[1,33]}),{6:[2,29],25:[1,34]},{42:[1,35],43:[2,32]},{6:[2,40],25:[1,36]},o($V5,[2,14],{25:[1,37]}),{13:38,19:42,33:$V6,50:$V7,51:$V8,52:[1,39],53:40,54:41,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},o($Vg,[2,27],{21:[1,54]}),{21:[1,55]},o($Vg,[2,38]),o($Vh,[2,12],{21:[1,56]}),o($Vi,[2,25],{18:[1,57]}),{18:[1,58],21:[2,36]},o($Vj,[2,10],{18:[1,59]}),{16:60,50:$Vk,51:$Vl},{15:[1,63]},o($Vm,[2,20],{31:64,32:[1,65]}),{6:[1,66]},{1:[2,2]},{11:13,12:$V0,14:25,17:22,20:17,24:12,27:67},{16:68,50:$Vk,51:$Vl},{16:69,50:$Vk,51:$Vl},{26:70,33:$Vn},{43:[2,31]},{26:72,33:$Vn},{26:73,33:$Vn},o($Vo,[2,7]),o($Vo,[2,44]),o($Vo,[2,45],{55:[1,74]}),o($Vp,[2,46]),o($Vp,[2,48],{52:$Vq,56:[1,75],63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VC,[2,56]),o($VC,[2,57]),o($VC,[2,58]),o($VC,[2,59]),{19:88,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:89,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},o($VC,[2,74]),{19:90,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},o($VC,[2,76],{75:[1,91]}),o($VC,[2,77]),o($VC,[2,78]),{22:[1,92]},{22:[1,93]},{22:[1,94]},{19:95,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:96,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:97,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{35:[1,98]},o($VD,[2,42]),o($VD,[2,43]),{16:99,50:$Vk,51:$Vl},o($Vm,[2,19]),o($Vm,[2,22],{33:[1,100]}),{1:[2,1]},o($V5,[2,18]),{35:[1,101]},o([6,18,21,25,28],[2,8]),{6:[2,28]},o($V5,[2,90],{55:[1,102]}),{6:[2,39]},o($V5,[2,13]),{19:42,33:$V6,50:$V7,51:$V8,54:103,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{50:[1,104],51:[1,105]},{19:106,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:107,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:108,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:109,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:110,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:111,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:112,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:113,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:114,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:115,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:116,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:117,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},o($VC,[2,60]),o($VE,[2,61],{52:$Vq,72:$VA}),{52:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,76:[1,118]},{19:121,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,76:[1,119],77:$Vf,78:120},{19:126,23:122,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf,79:$VF,80:124,81:125},{19:126,23:127,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf,79:$VF,80:124,81:125},{19:126,23:128,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf,79:$VF,80:124,81:125},o($Vi,[2,24],{52:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),{21:[2,35],52:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},o($Vj,[2,9],{52:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),{36:129,50:$VG,51:$VH,57:130},o([18,21],[2,34]),o($Vm,[2,21]),{36:133,50:$VG,51:$VH,57:130},{33:[1,134]},o($Vp,[2,47]),o($Vp,[2,49]),o($Vp,[2,50]),o([6,15,18,21,25,28,35,55,56,64,76,82,83],[2,62],{52:$Vq,63:$Vr,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o([6,15,18,21,25,28,35,55,56,64,65,76,82,83],[2,63],{52:$Vq,63:$Vr,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VI,[2,64],{52:$Vq,63:$Vr,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VI,[2,65],{52:$Vq,63:$Vr,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VJ,[2,66],{52:$Vq,63:$Vr,72:$VA,73:$VB}),o($VJ,[2,67],{52:$Vq,63:$Vr,72:$VA,73:$VB}),o($VJ,[2,68],{52:$Vq,63:$Vr,72:$VA,73:$VB}),o($VJ,[2,69],{52:$Vq,63:$Vr,72:$VA,73:$VB}),o($VC,[2,70]),o($VC,[2,71]),o($VE,[2,72],{52:$Vq,72:$VA}),o($VE,[2,73],{52:$Vq,72:$VA}),o($VC,[2,75]),o($VC,[2,79]),{55:[1,136],76:[1,135]},o($VK,[2,81],{52:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($Vg,[2,26]),o($Vh,[2,83]),o($Vh,[2,84],{55:[1,137]}),o($VL,[2,85]),o($VL,[2,89],{52:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,82:[1,138],83:[1,139]}),o($Vg,[2,37]),o($Vh,[2,11]),o([6,18,21,25],[2,23],{35:$VM,55:$VN}),o($VO,[2,51]),{58:[1,142]},{58:[1,143]},{6:[2,33],35:$VM,55:$VN},o($V5,[2,91]),o($VC,[2,80]),{19:144,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:126,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf,81:145},o($VL,[2,87]),o($VL,[2,88]),{50:$VG,51:$VH,57:146},{50:$VG,51:$VH,57:147},{19:148,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},{19:149,33:$V6,50:$V7,51:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,63:$Vd,74:49,75:$Ve,77:$Vf},o($VK,[2,82],{52:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VL,[2,86]),o($VO,[2,52]),o($VO,[2,53]),o($VO,[2,54],{52:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VO,[2,55],{52:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB})],
defaultActions: {5:[2,4],6:[2,5],7:[2,6],9:[2,30],11:[2,41],30:[2,2],35:[2,31],66:[2,1],70:[2,28],72:[2,39]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    var JQLParser = {

        OP: {
            statement:             'statement',
            table_reference:       'table_reference',
            expression:            'expression',
            fields_list:           'fields_list',
            field:                 'field',
            update_field:          'update_field',
            delayed_option:        'delayed_option',
            limit_option:          'limit_option',
            order_by_option:       'order_by_option',
            order_by_expression:   'order_by_expression'
        },

        id: 0,

        createAlias( prefix ) {
            JQLParser.id++;
            return ( prefix || 'field_' ) + JQLParser.id;
        },

        unescapeIdentifier: function( escapedIdentifier ) {
            return String( escapedIdentifier || '' ).replace( /^`([\S]+)`$/, '$1' );
        },

        unescapeBindingName: function( bindingName ) {
            return String( bindingName || '' ).replace( /^\:/, '' );
        },

        parseBoolean: function( input ) {

            return String(input || '').toLowerCase() === 'true';

        },

        parseNumber: function( input ) {
            return Number( input );
        },

        parseString: function( input ) {

            if ( 'string' !== typeof input ) {
                throw new Error('Invalid argument: string expected!');
            }

            var strlen = input.length,
                startch = input.charAt(0),
                endch   = input.charAt( strlen - 1 ),
                ch,
                nextch,
                result = '';

            if ( strlen < 2 || startch != endch || ( startch !== "'" && startch !== '"' ) ) {
                throw new Error('Failed to parse string! Please report this bug!');
            }

            for ( var i=1; i < strlen - 1; i++ ) {

                ch = input.charAt(i);

                if ( '\\' === ch ) {

                     nextch = input.charAt(i + 1);

                     switch (nextch) {
                        case "r": // "r"
                            result += "\r";
                            break;
                        case "t": // "t"
                            result += "\t";
                            break;
                        case "n": // "n"
                            result += "\n";
                            break;
                        case "\\": // "\"
                            result += "\\";
                            break;
                        case '':
                            throw new Error('Unexpected string termination!');
                            break;
                        default:
                            result += nextch;
                            break;
                     }

                     i++;

                } else {

                    result += ch;

                }
            }

            return result;
        },

        createFieldAliasFromExpression( expression ) {
            switch ( expression.type ) {
                case 'string':
                case 'boolean':
                case 'number':
                    return String( expression.value );
                case 'null':
                    return 'null';
                default:
                    return null;
            }
        }

    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */
break;
case 1:return 33;
break;
case 2:return 33;
break;
case 3:return 59;
break;
case 4:return 60;
break;
case 5:return 61;
break;
case 6:return 61;
break;
case 7:return 12;
break;
case 8:return 30;
break;
case 9:return 41;
break;
case 10:return 45;
break;
case 11:return 4;
break;
case 12:return 15;
break;
case 13:return 18;
break;
case 14:return 25;
break;
case 15:return 28;
break;
case 16:return 56;
break;
case 17:return 35;
break;
case 18:return 32;
break;
case 19:return 21;
break;
case 20:return 22;
break;
case 21:return 79;
break;
case 22:return 82;
break;
case 23:return 82;
break;
case 24:return 83;
break;
case 25:return 83;
break;
case 26:return 42;
break;
case 27:return 43;
break;
case 28:return 75;
break;
case 29:return 76;
break;
case 30:return 52;
break;
case 31:return 72;
break;
case 32:return 73;
break;
case 33:return 63;
break;
case 34:return 62;
break;
case 35:return '!=';
break;
case 36:return 68;
break;
case 37:return 69;
break;
case 38:return 70;
break;
case 39:return 71;
break;
case 40:return 66;
break;
case 41:return 58;
break;
case 42:return '!=';
break;
case 43:return 67;
break;
case 44:return 65;
break;
case 45:return 65;
break;
case 46:return 64;
break;
case 47:return 64;
break;
case 48:return 55;
break;
case 49:return 50;
break;
case 50:return 51;
break;
case 51:return 77;
break;
case 52:return 6
break;
case 53:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[0-9]+\.[0-9]*|[0-9]*\.[0-9]+\b)/i,/^(?:[0-9]+)/i,/^(?:true|false\b)/i,/^(?:null\b)/i,/^(?:"(\\["]|[^"])*")/i,/^(?:'(\\[']|[^'])*')/i,/^(?:select\b)/i,/^(?:update\b)/i,/^(?:insert\b)/i,/^(?:delete\b)/i,/^(?:remote\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:limit\b)/i,/^(?:union\b)/i,/^(?:as\b)/i,/^(?:set\b)/i,/^(?:delayed\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:random\b)/i,/^(?:asc\b)/i,/^(?:ascending\b)/i,/^(?:desc\b)/i,/^(?:descending\b)/i,/^(?:ignore\b)/i,/^(?:into\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:!)/i,/^(?:<>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:~=)/i,/^(?:&&)/i,/^(?:and\b)/i,/^(?:\|\|)/i,/^(?:or\b)/i,/^(?:,)/i,/^(?:[A-Za-z_\$][A-Za-z0-9_]*)/i,/^(?:`[A-Za-z_\$][A-Za-z0-9_]*`)/i,/^(?::[A-Za-z_\$][A-Za-z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jql;
exports.Parser = jql.Parser;
exports.parse = function () { return jql.parse.apply(jql, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}