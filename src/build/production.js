window.JQL = window.JQL || (function() {
/**
 * JQL v2.0 files.
 * Copyright (c) www.123FormBuider.com
 */

/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var JQLGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,27],$V2=[1,15],$V3=[1,26],$V4=[6,28],$V5=[1,42],$V6=[1,50],$V7=[1,51],$V8=[1,43],$V9=[1,44],$Va=[1,45],$Vb=[1,46],$Vc=[1,47],$Vd=[1,49],$Ve=[1,52],$Vf=[6,25],$Vg=[6,25,28],$Vh=[6,21,25],$Vi=[6,21,25,28],$Vj=[1,60],$Vk=[1,61],$Vl=[50,51],$Vm=[1,70],$Vn=[6,15,28],$Vo=[6,15,28,55],$Vp=[1,85],$Vq=[1,79],$Vr=[1,88],$Vs=[1,76],$Vt=[1,77],$Vu=[1,78],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,86],$VB=[1,87],$VC=[6,15,18,21,25,28,35,52,55,56,58,63,64,65,66,67,68,69,70,71,72,73,76,82,83],$VD=[6,18,21,25,28,35],$VE=[6,15,18,21,25,28,35,55,56,58,63,64,65,66,67,68,69,70,71,73,76,82,83],$VF=[1,125],$VG=[1,133],$VH=[1,134],$VI=[6,18,21,25],$VJ=[6,15,18,21,25,28,35,55,56,58,64,65,66,67,68,69,70,71,76,82,83],$VK=[6,15,18,21,25,28,35,55,56,58,64,66,67,76,82,83],$VL=[55,76],$VM=[6,25,28,55],$VN=[1,142],$VO=[1,143],$VP=[6,18,21,25,35,55];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"JQL":3,"REMOTE":4,"Statement":5,"EOF":6,"SelectStatement":7,"UpdateStatement":8,"InsertStatement":9,"DeleteStatement":10,"SelectSingleRowStatement":11,"SELECT":12,"SelectFieldsList":13,"SelectFromTableStatement":14,"FROM":15,"TableReference":16,"SelectWithOptionalWHEREClause":17,"WHERE":18,"Expression":19,"SelectWithOptionalORDERClause":20,"ORDER":21,"BY":22,"OrderByClause":23,"SelectWithOptionalLIMITClause":24,"LIMIT":25,"LimitClause":26,"SelectStatementWithoutUnion":27,"UNION":28,"UpdateStatementBegin":29,"UPDATE":30,"DelayedClause":31,"DELAYED":32,"NUMBER":33,"UpdateAllRowsStatement":34,"SET":35,"UpdateFieldsList":36,"UpdateWithOptionalWHEREStatement":37,"UpdateWithOptionalORDERStatement":38,"UpdateWithOptionalLIMITStatement":39,"LimitClauseWithoutRowSkipping":40,"InsertStatementBegin":41,"INSERT":42,"IGNORE":43,"INTO":44,"DeleteAllRowsStatement":45,"DELETE":46,"DeleteWithOptionalWHEREClauseStatement":47,"DeleteWithOptionalORDERClauseStatement":48,"DeleteWithOptionalLIMITClauseStatement":49,"IDENTIFIER":50,"ESCAPED_IDENTIFIER":51,"*":52,"SelectFieldEnumeration":53,"SelectField":54,",":55,"AS":56,"UpdateField":57,"=":58,"BOOLEAN":59,"NULL":60,"STRING":61,"!":62,"-":63,"||":64,"<>":65,"&&":66,"like":67,"<=":68,"<":69,">=":70,">":71,"/":72,"+":73,"FunctionCall":74,"(":75,")":76,"BINDING":77,"FunctionCallArgumentsList":78,"RANDOM":79,"OrderByClauseFieldsList":80,"OrderByField":81,"ASC":82,"DESC":83,"$accept":0,"$end":1},
terminals_: {2:"error",4:"REMOTE",6:"EOF",12:"SELECT",15:"FROM",18:"WHERE",21:"ORDER",22:"BY",25:"LIMIT",28:"UNION",30:"UPDATE",32:"DELAYED",33:"NUMBER",35:"SET",42:"INSERT",43:"IGNORE",44:"INTO",46:"DELETE",50:"IDENTIFIER",51:"ESCAPED_IDENTIFIER",52:"*",55:",",56:"AS",58:"=",59:"BOOLEAN",60:"NULL",61:"STRING",62:"!",63:"-",64:"||",65:"<>",66:"&&",67:"like",68:"<=",69:"<",70:">=",71:">",72:"/",73:"+",75:"(",76:")",77:"BINDING",79:"RANDOM",82:"ASC",83:"DESC"},
productions_: [0,[3,3],[3,2],[5,1],[5,1],[5,1],[5,1],[11,2],[14,3],[17,3],[17,1],[20,4],[20,1],[24,3],[24,1],[27,1],[27,1],[7,1],[7,3],[29,2],[29,1],[31,2],[31,1],[34,4],[37,3],[37,1],[38,4],[38,1],[39,3],[39,1],[8,1],[41,2],[41,1],[9,5],[45,3],[47,3],[47,1],[48,4],[48,1],[49,3],[49,1],[10,1],[16,1],[16,1],[13,1],[13,1],[53,1],[53,3],[54,1],[54,3],[54,3],[36,1],[36,3],[36,3],[57,3],[57,3],[19,1],[19,1],[19,1],[19,1],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,1],[19,3],[19,1],[19,1],[19,1],[74,3],[74,4],[78,1],[78,3],[23,1],[23,1],[80,1],[80,3],[81,2],[81,2],[81,1],[40,1],[26,3],[26,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                                                                    //js
                                                                    this.$ = $$[$0-1];
                                                                    this.$.remote = true;
                                                                    return this.$;
                                                               
break;
case 2:

                                                                    //js
                                                                    this.$ = $$[$0-1];
                                                                    this.$.remote = false;
                                                                    return this.$;
                                                               
break;
case 3: case 4: case 5: case 6: case 12: case 14: case 15: case 16: case 17: case 25: case 29: case 30: case 38: case 40: case 41: case 75:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                               
break;
case 7:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.STATEMENT,
                                                                        type:         AST.STATEMENT_TYPES.SELECT,
                                                                        fields:       $$[$0]
                                                                    };
                                                               
break;
case 8:

                                                                    //js
                                                                    this.$ = $$[$0-2];
                                                                    this.$.table = $$[$0]
                                                               
break;
case 9: case 24: case 35:

                                                                    //js
                                                                    this.$ = $$[$0-2];
                                                                    this.$.where = $$[$0];
                                                               
break;
case 10: case 36:

                                                                    this.$ = $$[$0];
                                                               
break;
case 11: case 26: case 37:

                                                                    //js
                                                                    this.$ = $$[$0-3];
                                                                    this.$.orderBy = $$[$0];
                                                               
break;
case 13: case 28: case 39:

                                                                    //js
                                                                    this.$ = $$[$0-2];
                                                                    this.$.limit = $$[$0];
                                                               
break;
case 18:

                                                                    //js
                                                                    this.$ = $$[$0-2];
                                                                    this.$.union = $$[$0];
                                                               
break;
case 19:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.STATEMENT,
                                                                        type:         AST.STATEMENT_TYPES.UPDATE,
                                                                        delayed: $$[$0]
                                                                    };
                                                               
break;
case 20:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.STATEMENT,
                                                                        type:         AST.STATEMENT_TYPES.UPDATE
                                                                    };
                                                               
break;
case 21:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.OPTION_DELAYED,
                                                                        timer:        AST.parseNumber($$[$0])
                                                                    };
                                                               
break;
case 22:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.OPTION_DELAYED,
                                                                        timer:        null
                                                                    };
                                                               
break;
case 23:

                                                                    //js
                                                                    this.$ = $$[$0-3];
                                                                    this.$.table = $$[$0-2];
                                                                    this.$.fields = $$[$0];
                                                               
break;
case 31:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.STATEMENT,
                                                                        type:         AST.STATEMENT_TYPES.INSERT,
                                                                        ignoreDuplicates: true
                                                                    };
                                                               
break;
case 32:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.STATEMENT,
                                                                        type:         AST.STATEMENT_TYPES.INSERT
                                                                    };
                                                               
break;
case 33:

                                                                    //js
                                                                    this.$ = $$[$0-4];
                                                                    this.$.table = $$[$0-2];
                                                                    this.$.fields = $$[$0];
                                                               
break;
case 34:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.STATEMENT,
                                                                        type:         AST.STATEMENT_TYPES.DELETE,
                                                                        table:        $$[$0]
                                                                    };
                                                               
break;
case 42:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.TABLE_REFERENCE,
                                                                        name:         $$[$0]
                                                                    };
                                                               
break;
case 43:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.TABLE_REFERENCE,
                                                                        name:         AST.unescapeIdentifier( $$[$0] )
                                                                    };
                                                               
break;
case 44:

                                                                    //js
                                                                    this.$ = {
                                                                         op:          AST.TOKEN_TYPES.FIELDS_LIST,
                                                                         type:        AST.FIELD_TYPES.ALL_FIELDS
                                                                    };
                                                               
break;
case 45:

                                                                    //js
                                                                    this.$ = { op:        AST.TOKEN_TYPES.FIELDS_LIST,
                                                                        type:         AST.FIELD_TYPES.SPECIFIC_FIELDS,
                                                                        fields:       $$[$0]
                                                                    };
                                                               
break;
case 46: case 51: case 82: case 86:

                                                                    //js
                                                                    this.$ = [ $$[$0] ];
                                                               
break;
case 47: case 52: case 53: case 83: case 87:

                                                                    //js
                                                                    this.$ = $$[$0-2].concat($$[$0]);
                                                               
break;
case 48:

                                                                    //js
                                                                    this.$ = {
                                                                         op:          AST.TOKEN_TYPES.FIELD,
                                                                         literal:     AST.createFieldAliasFromExpression($$[$0]),
                                                                         expression:  $$[$0]
                                                                     };
                                                               
break;
case 49:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.FIELD,
                                                                        literal:      $$[$0],
                                                                        expression:   $$[$0-2]
                                                                    };
                                                               
break;
case 50:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.FIELD,
                                                                        literal:      AST.unescapeIdentifier($$[$0]),
                                                                        expression:   $$[$0-2]
                                                                    };
                                                               
break;
case 54:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.UPDATE_FIELD,
                                                                        name:         $$[$0-2],
                                                                        expression:   $$[$0]
                                                                    };
                                                               
break;
case 55:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.UPDATE_FIELD,
                                                                        name:         AST.unescapeIdentifier($$[$0-2]),
                                                                        expression:   $$[$0]
                                                                    };
                                                               
break;
case 56:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.NUMBER,
                                                                        value:        AST.parseNumber( $$[$0] )
                                                                    };
                                                               
break;
case 57:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.BOOLEAN,
                                                                        value:        AST.parseBoolean( $$[$0] )
                                                                    };
                                                               
break;
case 58:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.NULL
                                                                    };
                                                               
break;
case 59:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.STRING,
                                                                        value:        AST.parseString( $$[$0] )
                                                                    };
                                                               
break;
case 60:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.UNARY,
                                                                        operator:     AST.OPERATOR.NOT,
                                                                        left:         $$[$0]
                                                                    };
                                                               
break;
case 61:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.UNARY,
                                                                        operator:     AST.OPERATOR.INVERT,
                                                                        left:         $$[$0]
                                                                    };
                                                               
break;
case 62:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.OR,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                               
break;
case 63:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.DIFFERENT,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };

                                                               
break;
case 64:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.AND,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                               
break;
case 65:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.EQUALS,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                               
break;
case 66:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.LIKE,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                               
break;
case 67:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.LTE,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                               
break;
case 68:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.LT,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                               
break;
case 69:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.GTE,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                               
break;
case 70:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.GT,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                               
break;
case 71:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.MATH,
                                                                        operator:     AST.OPERATOR.MULTIPLY,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                               
break;
case 72:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.MATH,
                                                                        operator:      AST.OPERATOR.DIVISION,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                               
break;
case 73:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.MATH,
                                                                        operator:     AST.OPERATOR.ADDITION,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                               
break;
case 74:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.MATH,
                                                                        operator:     AST.OPERATOR.DIFFERENCE,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                               
break;
case 76:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.GROUP,
                                                                        expression:   $$[$0-1]
                                                                    };
                                                               
break;
case 77:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.IDENTIFIER,
                                                                        name:         $$[$0]
                                                                    };
                                                               
break;
case 78:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.IDENTIFIER,
                                                                        name:         AST.unescapeIdentifier($$[$0])
                                                                    };
                                                               
break;
case 79:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.BINDING,
                                                                        name:         AST.unescapeBindingName($$[$0])
                                                                    };
                                                               
break;
case 80:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.FUNCTION_CALL,
                                                                        function_name: $$[$0-2],
                                                                        arguments:    []
                                                                    };
                                                               
break;
case 81:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.FUNCTION_CALL,
                                                                        function_name: $$[$0-3],
                                                                        arguments:    $$[$0-1]
                                                                    };
                                                               
break;
case 84:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.OPTION_ORDERING,
                                                                        type:         AST.ORDERING_STRATEGY.RANDOM
                                                                    };
                                                               
break;
case 85:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.OPTION_ORDERING,
                                                                        type:         AST.ORDERING_STRATEGY.ORDERED,
                                                                        fields:       $$[$0]
                                                                    };
                                                               
break;
case 88:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.ORDER_EXPRESSION,
                                                                        expression:   $$[$0-1],
                                                                        direction:    AST.ORDER_DIRECTION.ASCENDING
                                                                    };
                                                               
break;
case 89:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.ORDER_EXPRESSION,
                                                                        expression:   $$[$0-1],
                                                                        direction:    AST.ORDER_DIRECTION.DESCENDING
                                                                    };
                                                               
break;
case 90:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.ORDER_EXPRESSION,
                                                                        expression:   $$[$0],
                                                                        direction:    AST.ORDER_DIRECTION.ASCENDING
                                                                    };
                                                               
break;
case 91:

                                                                    //js
                                                                    this.$ = {
                                                                       op:           AST.TOKEN_TYPES.OPTION_LIMIT,
                                                                       limit:        AST.parseNumber( $$[$0] ),
                                                                       skip:         0
                                                                   };
                                                              
break;
case 92:

                                                                        //js
                                                                        this.$ = {
                                                                            op:           AST.TOKEN_TYPES.OPTION_LIMIT,
                                                                            limit:        AST.parseNumber( $$[$0] ),
                                                                            skip:         AST.parseNumber( $$[$0-2] )
                                                                        };
                                                               
break;
case 93:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.OPTION_LIMIT,
                                                                        limit:        AST.parseNumber( $$[$0] ),
                                                                        skip:         0
                                                                    };
                                                               
break;
}
},
table: [{3:1,4:[1,2],5:3,7:4,8:5,9:6,10:7,11:13,12:$V0,14:24,17:21,20:17,24:12,27:8,29:25,30:$V1,34:22,37:19,38:14,39:9,41:10,42:$V2,45:23,46:$V3,47:20,48:16,49:11},{1:[3]},{5:28,7:4,8:5,9:6,10:7,11:13,12:$V0,14:24,17:21,20:17,24:12,27:8,29:25,30:$V1,34:22,37:19,38:14,39:9,41:10,42:$V2,45:23,46:$V3,47:20,48:16,49:11},{6:[1,29]},{6:[2,3],28:[1,30]},{6:[2,4]},{6:[2,5]},{6:[2,6]},o($V4,[2,17]),{6:[2,30]},{44:[1,31]},{6:[2,41]},o($V4,[2,15]),o($V4,[2,16],{15:[1,32]}),{6:[2,29],25:[1,33]},{43:[1,34],44:[2,32]},{6:[2,40],25:[1,35]},o($V4,[2,14],{25:[1,36]}),{13:37,19:41,33:$V5,50:$V6,51:$V7,52:[1,38],53:39,54:40,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},o($Vf,[2,27],{21:[1,53]}),o($Vf,[2,38],{21:[1,54]}),o($Vg,[2,12],{21:[1,55]}),o($Vh,[2,25],{18:[1,56]}),o($Vh,[2,36],{18:[1,57]}),o($Vi,[2,10],{18:[1,58]}),{16:59,50:$Vj,51:$Vk},{15:[1,62]},o($Vl,[2,20],{31:63,32:[1,64]}),{6:[1,65]},{1:[2,2]},{11:13,12:$V0,14:24,17:21,20:17,24:12,27:66},{16:67,50:$Vj,51:$Vk},{16:68,50:$Vj,51:$Vk},{33:$Vm,40:69},{44:[2,31]},{33:$Vm,40:71},{26:72,33:[1,73]},o($Vn,[2,7]),o($Vn,[2,44]),o($Vn,[2,45],{55:[1,74]}),o($Vo,[2,46]),o($Vo,[2,48],{52:$Vp,56:[1,75],58:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VC,[2,56]),o($VC,[2,57]),o($VC,[2,58]),o($VC,[2,59]),{19:89,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:90,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},o($VC,[2,75]),{19:91,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},o($VC,[2,77],{75:[1,92]}),o($VC,[2,78]),o($VC,[2,79]),{22:[1,93]},{22:[1,94]},{22:[1,95]},{19:96,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:97,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:98,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{35:[1,99]},o($VD,[2,42]),o($VD,[2,43]),{16:100,50:$Vj,51:$Vk},o($Vl,[2,19]),o($Vl,[2,22],{33:[1,101]}),{1:[2,1]},o($V4,[2,18]),{35:[1,102]},o([6,18,21,25,28],[2,8]),{6:[2,28]},{6:[2,91]},{6:[2,39]},o($V4,[2,13]),o($V4,[2,93],{55:[1,103]}),{19:41,33:$V5,50:$V6,51:$V7,54:104,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{50:[1,105],51:[1,106]},{19:107,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:108,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:109,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:110,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:111,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:112,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:113,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:114,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:115,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:116,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:117,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:118,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:119,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},o($VC,[2,60]),o($VE,[2,61],{52:$Vp,72:$VA}),{52:$Vp,58:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,76:[1,120]},{19:123,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,76:[1,121],77:$Ve,78:122},{19:128,23:124,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve,79:$VF,80:126,81:127},{19:128,23:129,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve,79:$VF,80:126,81:127},{19:128,23:130,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve,79:$VF,80:126,81:127},o($Vh,[2,24],{52:$Vp,58:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($Vh,[2,35],{52:$Vp,58:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($Vi,[2,9],{52:$Vp,58:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),{36:131,50:$VG,51:$VH,57:132},o($VI,[2,34]),o($Vl,[2,21]),{36:135,50:$VG,51:$VH,57:132},{33:[1,136]},o($Vo,[2,47]),o($Vo,[2,49]),o($Vo,[2,50]),o([6,15,18,21,25,28,35,55,56,64,76,82,83],[2,62],{52:$Vp,58:$Vq,63:$Vr,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VJ,[2,63],{52:$Vp,63:$Vr,72:$VA,73:$VB}),o([6,15,18,21,25,28,35,55,56,64,66,76,82,83],[2,64],{52:$Vp,58:$Vq,63:$Vr,65:$Vt,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VK,[2,65],{52:$Vp,63:$Vr,65:$Vt,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VK,[2,66],{52:$Vp,63:$Vr,65:$Vt,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VJ,[2,67],{52:$Vp,63:$Vr,72:$VA,73:$VB}),o($VJ,[2,68],{52:$Vp,63:$Vr,72:$VA,73:$VB}),o($VJ,[2,69],{52:$Vp,63:$Vr,72:$VA,73:$VB}),o($VJ,[2,70],{52:$Vp,63:$Vr,72:$VA,73:$VB}),o($VC,[2,71]),o($VC,[2,72]),o($VE,[2,73],{52:$Vp,72:$VA}),o($VE,[2,74],{52:$Vp,72:$VA}),o($VC,[2,76]),o($VC,[2,80]),{55:[1,138],76:[1,137]},o($VL,[2,82],{52:$Vp,58:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($Vf,[2,26]),o($Vg,[2,84]),o($Vg,[2,85],{55:[1,139]}),o($VM,[2,86]),o($VM,[2,90],{52:$Vp,58:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,82:[1,140],83:[1,141]}),o($Vf,[2,37]),o($Vg,[2,11]),o($VI,[2,23],{35:$VN,55:$VO}),o($VP,[2,51]),{58:[1,144]},{58:[1,145]},{6:[2,33],35:$VN,55:$VO},o($V4,[2,92]),o($VC,[2,81]),{19:146,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:128,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve,81:147},o($VM,[2,88]),o($VM,[2,89]),{50:$VG,51:$VH,57:148},{50:$VG,51:$VH,57:149},{19:150,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},{19:151,33:$V5,50:$V6,51:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,74:48,75:$Vd,77:$Ve},o($VL,[2,83],{52:$Vp,58:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VM,[2,87]),o($VP,[2,52]),o($VP,[2,53]),o($VP,[2,54],{52:$Vp,58:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VP,[2,55],{52:$Vp,58:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB})],
defaultActions: {5:[2,4],6:[2,5],7:[2,6],9:[2,30],11:[2,41],29:[2,2],34:[2,31],65:[2,1],69:[2,28],70:[2,91],71:[2,39]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    // JQL Abstract Syntax Tree
    var AST = {

        STATEMENT_TYPES: {
            SELECT:                'select',
            UPDATE:                'update',
            INSERT:                'insert',
            DELETE:                'delete'
        },

        TOKEN_TYPES: {
            STATEMENT:             'statement',
            TABLE_REFERENCE:       'table_reference',
            EXPRESSION:            'expression',
            FIELDS_LIST:           'fields_list',
            FIELD:                 'field',
            UPDATE_FIELD:          'update_field',
            OPTION_DELAYED:        'delayed_option',
            OPTION_LIMIT:          'limit_option',
            OPTION_ORDERING:       'order_by_option',
            ORDER_EXPRESSION:      'order_by_expression'
        },

        EXPRESSION: {
            NUMBER:                'number',        // 0, 2.123, 2, 231231
            BOOLEAN:               'boolean',       // true, false
            NULL:                  'null',          // null
            STRING:                'string',        // "mumu"
            UNARY:                 'unary',         // !foo, -a
            LOGICAL:               'logical',       // a && b, 2 || true
            MATH:                  'math',          // foo + 3, 2 / 4
            GROUP:                 'group',         // ( 2 + 3 * 6 + sum( '2', 3 ) )
            IDENTIFIER:            'identifier',    // foo
            BINDING:               'binding',       // :foo
            FUNCTION_CALL:         'function_call'  // foo(2, 3, mar(bar + 2) )
        },

        OPERATOR: {

            NOT:                   '!',             // !true, !1, !asd, !"1"
            INVERT:                '-',             // -3, -true, -"asd",

            OR:                    '||',            // a or b, a || b
            AND:                   '&&',            // a && b, a and b

            EQUALS:                '=',             // a = b, 1 = 2
            LIKE:                  'like',          // a like '%foo'
            DIFFERENT:             '<>',            // a <> b

            LTE:                   '<=',            // 3 <= 4
            LT:                    '<',             // 3 <  4
            GTE:                   '>=',            // 4 >= 3
            GT:                    '>',             // 4 > 3

            MULTIPLY:              '*',             // 3 * 4
            DIVISION:              '/',             // 3 / 4

            ADDITION:              '+',             // 3 + 4
            DIFFERENCE:            '-',             // 4 - 3

        },

        ORDERING_STRATEGY: {
            RANDOM:                'random',
            ORDERED:               'ordered'
        },

        ORDER_DIRECTION: {
            ASCENDING:             'asc',
            DESCENDING:            'desc'
        },

        FIELD_TYPES: {
            ALL_FIELDS:            'all',
            SPECIFIC_FIELDS:       'enumeration'
        },

        unescapeIdentifier: function( escapedIdentifier ) {
            return String( escapedIdentifier || '' ).replace( /^`([\S]+)`$/, '$1' );
        },

        unescapeBindingName: function( bindingName ) {
            return String( bindingName || '' ).replace( /^\:/, '' );
        },

        parseBoolean: function( input ) {

            return String(input || '').toLowerCase() === 'true';

        },

        parseNumber: function( input ) {
            return Number( input );
        },

        parseString: function( input ) {

            if ( 'string' !== typeof input ) {
                throw new Error('Invalid argument: string expected!');
            }

            var strlen = input.length,
                startch = input.charAt(0),
                endch   = input.charAt( strlen - 1 ),
                ch,
                nextch,
                result = '';

            if ( strlen < 2 || startch != endch || ( startch !== "'" && startch !== '"' ) ) {
                throw new Error('Failed to parse string! Please report this bug!');
            }

            for ( var i=1; i < strlen - 1; i++ ) {

                ch = input.charAt(i);

                if ( '\\' === ch ) {

                     nextch = input.charAt(i + 1);

                     switch (nextch) {
                        case "r": // "r"
                            result += "\r";
                            break;
                        case "t": // "t"
                            result += "\t";
                            break;
                        case "n": // "n"
                            result += "\n";
                            break;
                        case "\\": // "\"
                            result += "\\";
                            break;
                        case '':
                            throw new Error('Unexpected string termination!');
                            break;
                        default:
                            result += nextch;
                            break;
                     }

                     i++;

                } else {

                    result += ch;

                }
            }

            return result;
        },

        createFieldAliasFromExpression: function( expression ) {
            switch ( expression.type ) {
                case 'string':
                case 'boolean':
                case 'number':
                    return String( expression.value );
                case 'null':
                    return 'null';
                default:
                    return null;
            }
        }

    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */
break;
case 1:return 33;
break;
case 2:return 33;
break;
case 3:return 59;
break;
case 4:return 60;
break;
case 5:return 61;
break;
case 6:return 61;
break;
case 7:return 12;
break;
case 8:return 30;
break;
case 9:return 42;
break;
case 10:return 46;
break;
case 11:return 4;
break;
case 12:return 15;
break;
case 13:return 18;
break;
case 14:return 25;
break;
case 15:return 28;
break;
case 16:return 56;
break;
case 17:return 35;
break;
case 18:return 32;
break;
case 19:return 21;
break;
case 20:return 22;
break;
case 21:return 79;
break;
case 22:return 82;
break;
case 23:return 82;
break;
case 24:return 83;
break;
case 25:return 83;
break;
case 26:return 43;
break;
case 27:return 44;
break;
case 28:return 75;
break;
case 29:return 76;
break;
case 30:return 52;
break;
case 31:return 72;
break;
case 32:return 73;
break;
case 33:return 63;
break;
case 34:return 62;
break;
case 35:return 65;
break;
case 36:return 68;
break;
case 37:return 69;
break;
case 38:return 70;
break;
case 39:return 71;
break;
case 40:return 58;
break;
case 41:return 67;
break;
case 42:return 66;
break;
case 43:return 66;
break;
case 44:return 64;
break;
case 45:return 64;
break;
case 46:return 55;
break;
case 47:return 50;
break;
case 48:return 51;
break;
case 49:return 77;
break;
case 50:return 6;
break;
case 51:return 'INVALID';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[0-9]+\.[0-9]*|[0-9]*\.[0-9]+\b)/i,/^(?:[0-9]+)/i,/^(?:true|false\b)/i,/^(?:null\b)/i,/^(?:"(\\["]|[^"])*")/i,/^(?:'(\\[']|[^'])*')/i,/^(?:select\b)/i,/^(?:update\b)/i,/^(?:insert\b)/i,/^(?:delete\b)/i,/^(?:remote\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:limit\b)/i,/^(?:union\b)/i,/^(?:as\b)/i,/^(?:set\b)/i,/^(?:delayed\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:random\b)/i,/^(?:asc\b)/i,/^(?:ascending\b)/i,/^(?:desc\b)/i,/^(?:descending\b)/i,/^(?:ignore\b)/i,/^(?:into\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:!)/i,/^(?:<>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:like\b)/i,/^(?:&&)/i,/^(?:and\b)/i,/^(?:\|\|)/i,/^(?:or\b)/i,/^(?:,)/i,/^(?:[A-Za-z_\$][A-Za-z0-9_]*)/i,/^(?:`[A-Za-z_\$][A-Za-z0-9_]*`)/i,/^(?::[A-Za-z_\$][A-Za-z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = JQLGrammar;
exports.Parser = JQLGrammar.Parser;
exports.parse = function () { return JQLGrammar.parse.apply(JQLGrammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}var EJQL_LEXER_OPCODE_TYPES;
(function (EJQL_LEXER_OPCODE_TYPES) {
    EJQL_LEXER_OPCODE_TYPES["STATEMENT"] = "statement";
    EJQL_LEXER_OPCODE_TYPES["TABLE"] = "table_reference";
    EJQL_LEXER_OPCODE_TYPES["EXPRESSION"] = "expression";
    EJQL_LEXER_OPCODE_TYPES["FIELDS_LIST"] = "fields_list";
    EJQL_LEXER_OPCODE_TYPES["FIELD"] = "field";
    EJQL_LEXER_OPCODE_TYPES["UPDATE_FIELD"] = "update_field";
    EJQL_LEXER_OPCODE_TYPES["DELAYED_OPTION"] = "delayed_option";
    EJQL_LEXER_OPCODE_TYPES["LIMIT_OPTION"] = "limit_option";
    EJQL_LEXER_OPCODE_TYPES["ORDER_BY_OPTION"] = "order_by_option";
    EJQL_LEXER_OPCODE_TYPES["ORDER_BY_EXPRESSION"] = "order_by_expression";
})(EJQL_LEXER_OPCODE_TYPES || (EJQL_LEXER_OPCODE_TYPES = {}));
var EJQL_LEXER_STATEMENT_TYPES;
(function (EJQL_LEXER_STATEMENT_TYPES) {
    EJQL_LEXER_STATEMENT_TYPES["SELECT"] = "select";
    EJQL_LEXER_STATEMENT_TYPES["UPDATE"] = "update";
    EJQL_LEXER_STATEMENT_TYPES["INSERT"] = "insert";
    EJQL_LEXER_STATEMENT_TYPES["DELETE"] = "delete";
})(EJQL_LEXER_STATEMENT_TYPES || (EJQL_LEXER_STATEMENT_TYPES = {}));
var EJQL_LEXER_FIELD_TYPES;
(function (EJQL_LEXER_FIELD_TYPES) {
    EJQL_LEXER_FIELD_TYPES["ALL_FIELDS"] = "all";
    EJQL_LEXER_FIELD_TYPES["SPECIFIC_FIELDS"] = "enumeration";
})(EJQL_LEXER_FIELD_TYPES || (EJQL_LEXER_FIELD_TYPES = {}));
var EJQL_LEXER_EXPRESSION_TYPES;
(function (EJQL_LEXER_EXPRESSION_TYPES) {
    EJQL_LEXER_EXPRESSION_TYPES["NUMBER"] = "number";
    EJQL_LEXER_EXPRESSION_TYPES["BOOLEAN"] = "boolean";
    EJQL_LEXER_EXPRESSION_TYPES["NULL"] = "null";
    EJQL_LEXER_EXPRESSION_TYPES["STRING"] = "string";
    EJQL_LEXER_EXPRESSION_TYPES["UNARY"] = "unary";
    EJQL_LEXER_EXPRESSION_TYPES["LOGICAL"] = "logical";
    EJQL_LEXER_EXPRESSION_TYPES["MATH"] = "math";
    EJQL_LEXER_EXPRESSION_TYPES["GROUP"] = "group";
    EJQL_LEXER_EXPRESSION_TYPES["IDENTIFIER"] = "identifier";
    EJQL_LEXER_EXPRESSION_TYPES["BINDING"] = "binding";
    EJQL_LEXER_EXPRESSION_TYPES["FUNCTION_CALL"] = "function_call";
})(EJQL_LEXER_EXPRESSION_TYPES || (EJQL_LEXER_EXPRESSION_TYPES = {}));
var EJQL_LEXER_ORDERING_STRATEGY;
(function (EJQL_LEXER_ORDERING_STRATEGY) {
    EJQL_LEXER_ORDERING_STRATEGY["RANDOM"] = "random";
    EJQL_LEXER_ORDERING_STRATEGY["ORDERED"] = "ordered";
})(EJQL_LEXER_ORDERING_STRATEGY || (EJQL_LEXER_ORDERING_STRATEGY = {}));
var EJQL_LEXER_ORDER_DIRECTION;
(function (EJQL_LEXER_ORDER_DIRECTION) {
    EJQL_LEXER_ORDER_DIRECTION["ASCENDING"] = "asc";
    EJQL_LEXER_ORDER_DIRECTION["DESCENDING"] = "desc";
})(EJQL_LEXER_ORDER_DIRECTION || (EJQL_LEXER_ORDER_DIRECTION = {}));
var EJQL_LEXER_OPERATOR_UNARY_TYPE;
(function (EJQL_LEXER_OPERATOR_UNARY_TYPE) {
    EJQL_LEXER_OPERATOR_UNARY_TYPE["NOT"] = "!";
    EJQL_LEXER_OPERATOR_UNARY_TYPE["INVERT"] = "-";
})(EJQL_LEXER_OPERATOR_UNARY_TYPE || (EJQL_LEXER_OPERATOR_UNARY_TYPE = {}));
var EJQL_LEXER_OPERATOR_LOGICAL_TYPE;
(function (EJQL_LEXER_OPERATOR_LOGICAL_TYPE) {
    EJQL_LEXER_OPERATOR_LOGICAL_TYPE["OR"] = "||";
    EJQL_LEXER_OPERATOR_LOGICAL_TYPE["AND"] = "&&";
})(EJQL_LEXER_OPERATOR_LOGICAL_TYPE || (EJQL_LEXER_OPERATOR_LOGICAL_TYPE = {}));
var EJQL_LEXER_OPERATOR_COMPARISION_TYPE;
(function (EJQL_LEXER_OPERATOR_COMPARISION_TYPE) {
    EJQL_LEXER_OPERATOR_COMPARISION_TYPE["EQUALS"] = "=";
    EJQL_LEXER_OPERATOR_COMPARISION_TYPE["DIFFERENT"] = "<>";
    EJQL_LEXER_OPERATOR_COMPARISION_TYPE["LIKE"] = "like";
    EJQL_LEXER_OPERATOR_COMPARISION_TYPE["LTE"] = "<=";
    EJQL_LEXER_OPERATOR_COMPARISION_TYPE["LT"] = "<";
    EJQL_LEXER_OPERATOR_COMPARISION_TYPE["GTE"] = ">=";
    EJQL_LEXER_OPERATOR_COMPARISION_TYPE["GT"] = ">";
})(EJQL_LEXER_OPERATOR_COMPARISION_TYPE || (EJQL_LEXER_OPERATOR_COMPARISION_TYPE = {}));
var EJQL_LEXER_OPERATOR_MATH_TYPE;
(function (EJQL_LEXER_OPERATOR_MATH_TYPE) {
    EJQL_LEXER_OPERATOR_MATH_TYPE["MULTIPLY"] = "*";
    EJQL_LEXER_OPERATOR_MATH_TYPE["DIVISION"] = "/";
    EJQL_LEXER_OPERATOR_MATH_TYPE["ADDITION"] = "+";
    EJQL_LEXER_OPERATOR_MATH_TYPE["DIFFERENCE"] = "-";
})(EJQL_LEXER_OPERATOR_MATH_TYPE || (EJQL_LEXER_OPERATOR_MATH_TYPE = {}));
var EJQLTableColumnType;
(function (EJQLTableColumnType) {
    EJQLTableColumnType["STRING"] = "string";
    EJQLTableColumnType["NUMBER"] = "number";
    EJQLTableColumnType["BOOLEAN"] = "boolean";
    EJQLTableColumnType["NULL"] = "null";
})(EJQLTableColumnType || (EJQLTableColumnType = {}));
var EJQLBackendTableColumnType;
(function (EJQLBackendTableColumnType) {
    EJQLBackendTableColumnType["STRING"] = "string";
    EJQLBackendTableColumnType["INT"] = "int";
    EJQLBackendTableColumnType["FLOAT"] = "float";
    EJQLBackendTableColumnType["BOOLEAN"] = "boolean";
})(EJQLBackendTableColumnType || (EJQLBackendTableColumnType = {}));
var EJQLTableStorageEngine;
(function (EJQLTableStorageEngine) {
    EJQLTableStorageEngine["IN_MEMORY"] = "memory";
    EJQLTableStorageEngine["REMOTE"] = "remote";
})(EJQLTableStorageEngine || (EJQLTableStorageEngine = {}));
var EJQLTableAccessMode;
(function (EJQLTableAccessMode) {
    EJQLTableAccessMode["READ"] = "r";
    EJQLTableAccessMode["WRITE"] = "w";
    EJQLTableAccessMode["READ_WRITE"] = "rw";
})(EJQLTableAccessMode || (EJQLTableAccessMode = {}));
var EJQLTableNamespace;
(function (EJQLTableNamespace) {
    EJQLTableNamespace["FORM"] = "private";
    EJQLTableNamespace["GLOBAL"] = "global";
})(EJQLTableNamespace || (EJQLTableNamespace = {}));
var EFormRuleEventType;
(function (EFormRuleEventType) {
    EFormRuleEventType[EFormRuleEventType["INIT"] = 0] = "INIT";
    EFormRuleEventType[EFormRuleEventType["CHANGE"] = 1] = "CHANGE";
    EFormRuleEventType[EFormRuleEventType["CHECK"] = 2] = "CHECK";
    EFormRuleEventType[EFormRuleEventType["UNCHECK"] = 3] = "UNCHECK";
    EFormRuleEventType[EFormRuleEventType["TEXT_INPUT"] = 4] = "TEXT_INPUT";
    EFormRuleEventType[EFormRuleEventType["ALL_EVENTS"] = 5] = "ALL_EVENTS";
    EFormRuleEventType[EFormRuleEventType["REINITIALIZE"] = 6] = "REINITIALIZE";
    EFormRuleEventType[EFormRuleEventType["APPROVED"] = 7] = "APPROVED";
    EFormRuleEventType[EFormRuleEventType["SUBMITTED"] = 8] = "SUBMITTED";
})(EFormRuleEventType || (EFormRuleEventType = {}));
var EventEmitter = (function () {
    function EventEmitter() {
    }
    EventEmitter.prototype.isEventTriggeringEnabled = function () {
        return !!!this.disableEventTriggering;
    };
    EventEmitter.prototype.on = function (eventName, callback) {
        if (this.events === undefined) {
            this.events = {};
        }
        if (this.events[eventName] === undefined) {
            this.events[eventName] = [];
        }
        this.events[eventName].push(callback);
        return this;
    };
    EventEmitter.prototype.off = function (eventName, callback) {
        if (this.events === undefined) {
            return this;
        }
        if (this.events[eventName] === undefined) {
            return this;
        }
        if (callback === undefined) {
            delete this.events[eventName];
        }
        else {
            for (var i = 0, len = this.events[eventName].length; i < len; i++) {
                if (this.events[eventName][i] === callback) {
                    this.events[eventName].splice(i, 1);
                    break;
                }
            }
            if (this.events[eventName].length === 0) {
                delete this.events[eventName];
            }
        }
        return this;
    };
    EventEmitter.prototype.disableEvents = function () {
        this.disableEventTriggering = true;
        return this;
    };
    EventEmitter.prototype.enableEvents = function () {
        this.disableEventTriggering = undefined;
        return this;
    };
    EventEmitter.prototype.enableSyncMode = function () {
        this.syncMode = true;
        return this;
    };
    EventEmitter.prototype.disableSyncMode = function () {
        this.syncMode = undefined;
        return this;
    };
    EventEmitter.prototype.trigger = function (eventName) {
        var eventArgs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            eventArgs[_i - 1] = arguments[_i];
        }
        if (!this.disableEventTriggering && this.events !== undefined) {
            if (this.events[eventName] !== undefined) {
                (function (self) {
                    for (var i = 0, len = self.events[eventName].length; i < len; i++) {
                        if (self.syncMode) {
                            self.events[eventName][i].apply(self, eventArgs);
                        }
                        else {
                            (function (callback) {
                                setTimeout(function () {
                                    callback.apply(self, eventArgs);
                                }, 0);
                            })(self.events[eventName][i]);
                        }
                    }
                })(this);
            }
        }
        return this;
    };
    return EventEmitter;
}());
var JQLValidatorV1Configuration = (function () {
    function JQLValidatorV1Configuration() {
    }
    JQLValidatorV1Configuration.assertJQLV1ConfigurationStructure = function (structure) {
        if (!(structure instanceof Object)) {
            throw new Error("Object expected!");
        }
        if (undefined === structure.controlId) {
            throw new Error("Missing property \"controlId\"");
        }
        if ("string" !== typeof structure.controlId) {
            throw new Error("Property \"controlId\" type should be string");
        }
        if (undefined === structure.eventType) {
            throw new Error("Missing property \"eventType\"");
        }
        if ("number" !== typeof structure.eventType) {
            throw new Error("Property \"eventType\" type should be number");
        }
        if (!Array.isArray(structure.actions)) {
            throw new Error("Missing property \"actions\"");
        }
        if (undefined !== structure.isRule) {
            if ("boolean" !== typeof structure.isRule) {
                throw new Error("Property \"isRule\" type should be boolean|undefined");
            }
        }
        for (var i = 0, len = structure.actions.length; i < len; i++) {
            this.assertJQLV1EventActionStructure(structure.actions[i]);
        }
    };
    JQLValidatorV1Configuration.assertJQLV1EventActionStructure = function (action) {
        if (!(action instanceof Object)) {
            throw new Error("Action object expected!");
        }
        if (undefined === action.controlId) {
            throw new Error("Action property \"controlId\" type should be string");
        }
        if ("string" !== typeof action.controlId) {
            throw new Error("Action property \"controlId\" should be string");
        }
        if (undefined === action.jql) {
            throw new Error("Action property \"jql\" should be string");
        }
        if ("string" !== typeof action.jql) {
            throw new Error("Action property \"jql\" should be string");
        }
    };
    return JQLValidatorV1Configuration;
}());
var JQLLexerFactory = (function () {
    function JQLLexerFactory() {
    }
    JQLLexerFactory.create = function (lexerToken) {
        switch (lexerToken.op) {
            case EJQL_LEXER_OPCODE_TYPES.STATEMENT:
                switch (lexerToken.type) {
                    case EJQL_LEXER_STATEMENT_TYPES.SELECT:
                        return new JQLStatementSelect(lexerToken);
                    case EJQL_LEXER_STATEMENT_TYPES.INSERT:
                        return new JQLStatementInsert(lexerToken);
                    case EJQL_LEXER_STATEMENT_TYPES.UPDATE:
                        return new JQLStatementUpdate(lexerToken);
                    case EJQL_LEXER_STATEMENT_TYPES.DELETE:
                        return new JQLStatementDelete(lexerToken);
                    default:
                        throw new Error("Cannot create statement from token: " + JSON.stringify(lexerToken));
                }
            case EJQL_LEXER_OPCODE_TYPES.TABLE:
                return new JQLTableReference(lexerToken);
            case EJQL_LEXER_OPCODE_TYPES.EXPRESSION:
                switch (lexerToken.type) {
                    case EJQL_LEXER_EXPRESSION_TYPES.NUMBER:
                        return new JQLExpressionNumber(lexerToken);
                    case EJQL_LEXER_EXPRESSION_TYPES.BOOLEAN:
                        return new JQLExpressionBoolean(lexerToken);
                    case EJQL_LEXER_EXPRESSION_TYPES.NULL:
                        return new JQLExpressionNull();
                    case EJQL_LEXER_EXPRESSION_TYPES.STRING:
                        return new JQLExpressionString(lexerToken);
                    case EJQL_LEXER_EXPRESSION_TYPES.UNARY:
                        switch (lexerToken.operator) {
                            case EJQL_LEXER_OPERATOR_UNARY_TYPE.INVERT:
                                return new JQLExpressionUnaryInvert(lexerToken);
                            case EJQL_LEXER_OPERATOR_UNARY_TYPE.NOT:
                                return new JQLExpressionUnaryNot(lexerToken);
                            default:
                                throw new Error("Cannot create unary expression from token: " + JSON.stringify(lexerToken));
                        }
                    case EJQL_LEXER_EXPRESSION_TYPES.LOGICAL:
                        switch (lexerToken.operator) {
                            case EJQL_LEXER_OPERATOR_LOGICAL_TYPE.AND:
                                return new JQLExpressionLogicalAnd(lexerToken);
                            case EJQL_LEXER_OPERATOR_LOGICAL_TYPE.OR:
                                return new JQLExpressionLogicalOr(lexerToken);
                            case EJQL_LEXER_OPERATOR_COMPARISION_TYPE.EQUALS:
                                return new JQLExpressionLogicalEquals(lexerToken);
                            case EJQL_LEXER_OPERATOR_COMPARISION_TYPE.DIFFERENT:
                                return new JQLExpressionLogicalDifferent(lexerToken);
                            case EJQL_LEXER_OPERATOR_COMPARISION_TYPE.GT:
                                return new JQLExpressionLogicalGreaterThen(lexerToken);
                            case EJQL_LEXER_OPERATOR_COMPARISION_TYPE.GTE:
                                return new JQLExpressionLogicalGreaterThenEquals(lexerToken);
                            case EJQL_LEXER_OPERATOR_COMPARISION_TYPE.LT:
                                return new JQLExpressionLogicalLowerThen(lexerToken);
                            case EJQL_LEXER_OPERATOR_COMPARISION_TYPE.LTE:
                                return new JQLExpressionLogicalLowerThenEquals(lexerToken);
                            case EJQL_LEXER_OPERATOR_COMPARISION_TYPE.LIKE:
                                return new JQLExpressionLogicalLike(lexerToken);
                            default:
                                throw new Error("Cannot create logical expression from token: " + JSON.stringify(lexerToken));
                        }
                    case EJQL_LEXER_EXPRESSION_TYPES.MATH:
                        switch (lexerToken.operator) {
                            case EJQL_LEXER_OPERATOR_MATH_TYPE.ADDITION:
                                return new JQLExpressionMathAddition(lexerToken);
                            case EJQL_LEXER_OPERATOR_MATH_TYPE.DIFFERENCE:
                                return new JQLExpressionMathDifference(lexerToken);
                            case EJQL_LEXER_OPERATOR_MATH_TYPE.DIVISION:
                                return new JQLExpressionMathDivision(lexerToken);
                            case EJQL_LEXER_OPERATOR_MATH_TYPE.MULTIPLY:
                                return new JQLExpressionMathMultiply(lexerToken);
                            default:
                                throw new Error("Cannot create math expression from token: " + JSON.stringify(lexerToken));
                        }
                    case EJQL_LEXER_EXPRESSION_TYPES.GROUP:
                        return new JQLExpressionGroup(lexerToken);
                    case EJQL_LEXER_EXPRESSION_TYPES.IDENTIFIER:
                        return new JQLExpressionIdentifier(lexerToken);
                    case EJQL_LEXER_EXPRESSION_TYPES.BINDING:
                        return new JQLExpressionBinding(lexerToken);
                    case EJQL_LEXER_EXPRESSION_TYPES.FUNCTION_CALL:
                        return new JQLExpressionFunctionCall(lexerToken);
                    default:
                        throw new Error("Unknown expression type: " + JSON.stringify(lexerToken));
                }
            case EJQL_LEXER_OPCODE_TYPES.FIELDS_LIST:
                switch (lexerToken.type) {
                    case EJQL_LEXER_FIELD_TYPES.ALL_FIELDS:
                        return new JQLStatementSelectFieldsListAll(lexerToken);
                    case EJQL_LEXER_FIELD_TYPES.SPECIFIC_FIELDS:
                        return new JQLStatementSelectFieldsListSpecific(lexerToken);
                    default:
                        throw new Error("Invalid lexer token select fields type: " + JSON.stringify(lexerToken));
                }
            case EJQL_LEXER_OPCODE_TYPES.FIELD:
                return new JQLStatementSelectField(lexerToken);
            case EJQL_LEXER_OPCODE_TYPES.UPDATE_FIELD:
                return new JQLStatementUpdateField(lexerToken);
            case EJQL_LEXER_OPCODE_TYPES.DELAYED_OPTION:
                return new JQLStatementUpdateDelayedOption(lexerToken);
            case EJQL_LEXER_OPCODE_TYPES.LIMIT_OPTION:
                return new JQLLimit(lexerToken);
            case EJQL_LEXER_OPCODE_TYPES.ORDER_BY_OPTION:
                switch (lexerToken.type) {
                    case EJQL_LEXER_ORDERING_STRATEGY.RANDOM:
                        return new JQLSorterStrategyRandom(lexerToken);
                    case EJQL_LEXER_ORDERING_STRATEGY.ORDERED:
                        return new JQLSorterStrategyByExpression(lexerToken);
                    default:
                        throw new Error("Invalid lexer token ORDER BY: " + JSON.stringify(lexerToken));
                }
            case EJQL_LEXER_OPCODE_TYPES.ORDER_BY_EXPRESSION:
                return new JQLSorterExpression(lexerToken);
            default:
                throw new Error("Invalid lexer token opcode type: " + JSON.stringify(lexerToken.op));
        }
    };
    return JQLLexerFactory;
}());
var JQLUtils = (function () {
    function JQLUtils() {
    }
    JQLUtils.getType = function (variable) {
        if (undefined === variable) {
            return null;
        }
        else {
            if (null === variable) {
                return EJQLTableColumnType.NULL;
            }
            else {
                var t = typeof variable;
                if (t === "number") {
                    if (isFinite(variable)) {
                        return EJQLTableColumnType.NUMBER;
                    }
                    else {
                        return null;
                    }
                }
                else {
                    if (t === "boolean") {
                        return EJQLTableColumnType.BOOLEAN;
                    }
                    else {
                        if (t === "string") {
                            return EJQLTableColumnType.STRING;
                        }
                        else {
                            return null;
                        }
                    }
                }
            }
        }
    };
    JQLUtils.isNumeric = function (s) {
        var t = this.getType(s);
        if (t === EJQLTableColumnType.NUMBER) {
            return true;
        }
        else {
            if (t === EJQLTableColumnType.STRING) {
                if (s !== "-" && s !== "+") {
                    return /^([\-+])?(0|[1-9]([0-9]+)?)?(\.[0-9]+)?/.test(s);
                }
            }
        }
        return false;
    };
    JQLUtils.getColumnDefinitions = function (o) {
        var mappings = Object.create(null), type;
        for (var y = 0, n = (o || []).length; y < n; y++) {
            if (y === 0) {
                for (var k in o[y]) {
                    if (o[y].hasOwnProperty(k)) {
                        type = this.getType(o[y][k]);
                        mappings[k] = type;
                    }
                }
            }
            else {
                break;
            }
        }
        var result = [];
        for (var k in mappings) {
            if (null !== mappings[k]) {
                result.push({
                    type: mappings[k],
                    name: k,
                });
            }
        }
        return result;
    };
    JQLUtils.isReservedKeyword = function (k) {
        return this.RESERVED_KEYWORDS.indexOf(String(k || "")) > -1;
    };
    JQLUtils.shuffleArray = function (a) {
        for (var i = a.length - 1; i > 0; i--) {
            var j = Math.floor(Math.random() * (i + 1));
            _a = [a[j], a[i]], a[i] = _a[0], a[j] = _a[1];
        }
        return a;
        var _a;
    };
    JQLUtils.compare = function (a, b) {
        var aType = this.getType(a), bType = this.getType(b);
        if (aType === null && bType === null) {
            return 0;
        }
        if (aType === null || bType === null) {
            if (aType === null) {
                return -1;
            }
            else {
                return 1;
            }
        }
        var aToString, bToString;
        if (aType === bType) {
            switch (aType) {
                case EJQLTableColumnType.BOOLEAN:
                case EJQLTableColumnType.NUMBER:
                case EJQLTableColumnType.NULL:
                    if (a == b) {
                        return 0;
                    }
                    else {
                        if (a < b) {
                            return -1;
                        }
                        else {
                            return 1;
                        }
                    }
                case EJQLTableColumnType.STRING:
                    aToString = String(a).toLowerCase();
                    bToString = String(b).toLowerCase();
            }
        }
        else {
            if (aType !== EJQLTableColumnType.STRING) {
                if (aType === EJQLTableColumnType.NUMBER) {
                    aToString = String(a);
                }
                else {
                    if (aType === EJQLTableColumnType.NULL) {
                        aToString = "";
                    }
                    else {
                        aToString = a
                            ? "1"
                            : "0";
                    }
                }
            }
            else {
                aToString = String(a).toLowerCase();
            }
            if (bType !== EJQLTableColumnType.STRING) {
                if (bType === EJQLTableColumnType.NUMBER) {
                    bToString = String(b);
                }
                else {
                    if (bType === EJQLTableColumnType.NULL) {
                        bToString = "";
                    }
                    else {
                        bToString = b
                            ? "1"
                            : "0";
                    }
                }
            }
            else {
                bToString = String(a).toLowerCase();
            }
        }
        if (aToString === bToString) {
            return 0;
        }
        else {
            if (aToString < bToString) {
                return -1;
            }
            else {
                return 1;
            }
        }
    };
    JQLUtils.parseString = function (s) {
        var result = "", ch, ch1;
        for (var i = 0, len = s.length; i < len; i++) {
            ch = s.charAt(i);
            if (ch === "\\") {
                ch1 = s.charAt(i + 1);
                i++;
                switch (ch1) {
                    case "r":
                        result += "\r";
                        break;
                    case "n":
                        result += "\n";
                        break;
                    case "t":
                        result += "\t";
                        break;
                    case "\\":
                        result += "\\";
                        break;
                    case "":
                        result += "\\";
                        break;
                    default:
                        result += ch1;
                }
            }
            else {
                result = result + ch;
            }
        }
        return result;
    };
    JQLUtils.castToString = function (primitive) {
        if (true === primitive) {
            return "1";
        }
        else if (false === primitive) {
            return "0";
        }
        else {
            return String(primitive || "");
        }
    };
    JQLUtils.compareAsStrings = function (a, b) {
        var aString = this.castToString(a).toLowerCase(), bString = this.castToString(b).toLowerCase();
        return aString === bString
            ? 0
            : (aString > bString
                ? -1
                : 1);
    };
    JQLUtils.RESERVED_KEYWORDS = [
        "select",
        "from",
        "where",
        "in",
        "limit",
        "order",
        "by",
        "asc",
        "update",
        "table",
        "set",
        "insert",
        "into",
        "values",
        "delete",
        "like",
    ];
    return JQLUtils;
}());
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var JQLDatabase = (function (_super) {
    __extends(JQLDatabase, _super);
    function JQLDatabase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.functions = {};
        _this.tables = {};
        _this.bindingProviders = [];
        return _this;
    }
    JQLDatabase.prototype.withJQuery = function (jq) {
        this.jq = jq;
        this.planner = new JQLDatabaseQueryPlanner(this);
        return this;
    };
    JQLDatabase.prototype.getJQuery = function () {
        return this.jq;
    };
    JQLDatabase.prototype.withAuthorizationToken = function (authorizationToken) {
        this.authorizationToken = authorizationToken;
        return this;
    };
    JQLDatabase.prototype.getAuthorizationToken = function () {
        return this.authorizationToken;
    };
    JQLDatabase.prototype.withRPCEndpointName = function (rpcEndpointName) {
        this.rpcEndpointName = rpcEndpointName;
        return this;
    };
    JQLDatabase.prototype.getRPCEndpointName = function () {
        return this.rpcEndpointName;
    };
    JQLDatabase.prototype.isValidIdentifierName = function (identifier) {
        return "string" === typeof identifier && /^[a-zA-Z$_][a-zA-Z0-9_$]+$/.test(identifier);
    };
    JQLDatabase.prototype.withFunction = function (functionName, func) {
        if (!this.isValidIdentifierName(functionName)) {
            throw new Error(JSON.stringify(functionName) + " is not a valid function name!");
        }
        functionName = functionName.toLowerCase();
        if (JQLUtils.isReservedKeyword(functionName)) {
            throw new Error(JSON.stringify(functionName) + " is a reserved keyword and cannot be used as a function name!");
        }
        if (undefined !== this.functions[functionName]) {
            throw new Error("Function " + JSON.stringify(functionName) + " already registered in database!");
        }
        this.functions[functionName] = func;
        return this;
    };
    JQLDatabase.prototype.hasFunction = function (functionName) {
        if ("string" === typeof functionName) {
            functionName = functionName.toLowerCase();
            if (undefined !== this.functions[functionName] && this.functions.hasOwnProperty(functionName)) {
                return true;
            }
        }
        return false;
    };
    JQLDatabase.prototype.callFunction = function (functionName, functionArgs) {
        if (this.hasFunction(functionName)) {
            return this.functions[functionName.toLowerCase()].apply(this, functionArgs);
        }
        else {
            throw new Error("Failed to call function " + JSON.stringify(functionName) + ": Function not defined!");
        }
    };
    JQLDatabase.prototype.getFunction = function (functionName) {
        if (this.hasFunction(functionName)) {
            return this.functions[functionName];
        }
        else {
            throw new Error("Failed to get function " + JSON.stringify(functionName) + ": Function not defined!");
        }
    };
    JQLDatabase.prototype.withTable = function (tableName, table) {
        if (!this.isValidIdentifierName(tableName)) {
            throw new Error(JSON.stringify(tableName) + " is not a valid table name!");
        }
        if (undefined !== this.tables[tableName]) {
            throw new Error("Table " + JSON.stringify(tableName) + " already created!");
        }
        this.tables[tableName] = table;
        return this;
    };
    JQLDatabase.prototype.withTablesList = function (tables) {
        for (var i = 0, len = tables.length; i < len; i++) {
            this.withTable(tables[i].name, new UnfetchedTable(tables[i], this));
        }
        if (tables && tables.length) {
            this.trigger("schema-changed");
        }
        return this;
    };
    JQLDatabase.prototype.hasTable = function (tableName) {
        return "string" === typeof tableName && undefined !== this.tables[tableName] && this.tables.hasOwnProperty(tableName);
    };
    JQLDatabase.prototype.enumerateTables = function () {
        var result = [];
        for (var tableName in this.tables) {
            if (this.tables.hasOwnProperty(tableName)) {
                result.push({
                    name: tableName,
                    instance: this.tables[tableName],
                });
            }
        }
        return result;
    };
    JQLDatabase.prototype.getTable = function (tableName) {
        if (this.hasTable(tableName)) {
            return this.tables[tableName];
        }
        else {
            throw new Error("Table " + JSON.stringify(tableName) + " does not exist!");
        }
    };
    JQLDatabase.prototype.createStatement = function (statement) {
        if (!statement || "string" !== typeof statement) {
            throw new Error("Invalid argument: statement: string expected!");
        }
        var stmt = JQLLexerFactory.create(JQLGrammar.parse(statement));
        var tableReference = stmt.getTable();
        if (tableReference) {
            if (!this.hasTable(tableReference.getName())) {
                throw new Error("Failed to create statement: Table " + JSON.stringify(tableReference.getName()) + " does not exist!");
            }
            var table = this.getTable(tableReference.getName()), statementIdentifiers = stmt.getIdentifiers();
            for (var i = 0, len = statementIdentifiers.length; i < len; i++) {
                if (!table.hasIdentifier(statementIdentifiers[i].getIdentifierName())) {
                    throw new Error("Unknown table identifier " + JSON.stringify(statementIdentifiers[i].getIdentifierName()));
                }
            }
            if (table.isRemote() !== stmt.isRemote()) {
                if (stmt.isRemote()) {
                    throw new Error("Cannot create remote statement affecting in-memory table!");
                }
                else {
                    throw new Error("Cannot create in-memory statement affecting remote table!");
                }
            }
        }
        else {
            if (stmt.getIdentifiers().length) {
                throw new Error("A statement which does not affect a table cannot have identifiers!");
            }
        }
        var statementFunctions = stmt.getFunctions();
        for (var i = 0, len = statementFunctions.length; i < len; i++) {
            if (!this.hasFunction(statementFunctions[i].getFunctionName())) {
                throw new Error("Failed to create statement: Function " + JSON.stringify(statementFunctions[i].getFunctionName()) + " is not declared!");
            }
            else {
                statementFunctions[i].withDatabase(this);
            }
        }
        return stmt;
    };
    JQLDatabase.prototype.executeStatement = function (statement, bindings) {
        try {
            statement.bind(bindings || {}, this);
            return this.planner.scheduleStatement(statement, this.createExecutionStrategy(statement));
        }
        catch (e) {
            return this.jq.Deferred(function (deferred) {
                deferred.reject(e);
            }).promise();
        }
    };
    JQLDatabase.prototype.createExecutionStrategy = function (statement) {
        if (!statement.isRemote()) {
            switch (statement.getStatementType()) {
                case EJQL_LEXER_STATEMENT_TYPES.SELECT:
                    return (new JQLDatabaseStatementExecutorSelect(statement, this)).execute();
                case EJQL_LEXER_STATEMENT_TYPES.INSERT:
                    return (new JQLDatabaseStatementExecutorInsert(statement, this)).execute();
                case EJQL_LEXER_STATEMENT_TYPES.UPDATE:
                    return (new JQLDatabaseStatementExecutorUpdate(statement, this)).execute();
                case EJQL_LEXER_STATEMENT_TYPES.DELETE:
                    return (new JQLDatabaseStatementExecutorDelete(statement, this)).execute();
                default:
                    throw new Error("Failed to create execution strategy: Uknown statement type!");
            }
        }
        else {
            return (new JQLDatabaseStatementExecutorRemoteStatement(statement, this)).execute();
        }
    };
    JQLDatabase.prototype.createTableFromCSVFile = function (request) {
        var data = new FormData();
        data.append("action", "create-table-from-csv");
        data.append("auth", this.authorizationToken);
        data.append("csvFile", request.csvFile || "");
        data.append("setting", btoa(JSON.stringify({
            table: {
                name: request.tableName,
                namespace: request.tableNamespace,
                accessMode: request.tableAccessMode,
                storageEngine: request.tableStorageEngine,
            },
            csvParser: {
                enclosure: JQLUtils.parseString(request.csvFieldEnclosure),
                encloseAllFields: request.csvEncloseAllFields,
                delimiter: JQLUtils.parseString(request.csvFieldDelimiter),
                escapeCharacter: JQLUtils.parseString(request.csvEscapeCharacter),
                autoTrim: request.csvAutoTrim,
                lineTerminator: JQLUtils.parseString(request.csvLineTerminator),
            },
        })));
        return (function ($, self) {
            return $.Deferred(function (defer) {
                $.ajax({
                    url: self.rpcEndpointName,
                    data: data,
                    type: "POST",
                    dataType: "json",
                    processData: false,
                    contentType: false,
                }).then(function (response) {
                    self.withTablesList([response]);
                    defer.resolve(response);
                }).fail(function (e) {
                    defer.reject(e);
                });
            }).promise();
        })(this.jq, this);
    };
    JQLDatabase.prototype.dropTable = function (tableName) {
        return (function ($, self) {
            return $.Deferred(function (defer) {
                if (!self.hasTable(tableName)) {
                    defer.reject(new Error("Table " + JSON.stringify(tableName) + " not found!"));
                    return;
                }
                $.ajax({
                    url: self.rpcEndpointName,
                    data: {
                        action: "drop-table",
                        auth: self.authorizationToken,
                        name: tableName,
                    },
                    type: "POST",
                    dataType: "json",
                }).then(function (response) {
                    delete self.tables[tableName];
                    self.trigger("schema-changed");
                    defer.resolve(response);
                }).fail(function (e) {
                    defer.reject(e);
                });
            }).promise();
        })(this.jq, this);
    };
    JQLDatabase.prototype.alterTableIndexes = function (tableName, indexes) {
        return (function ($, self) {
            return $.Deferred(function (defer) {
                if (!self.hasTable(tableName)) {
                    defer.reject(new Error("Table " + JSON.stringify(tableName) + " not found!"));
                    return;
                }
                $.ajax({
                    url: self.rpcEndpointName,
                    data: {
                        action: "alter-table-indexes",
                        auth: self.authorizationToken,
                        name: tableName,
                        indexes: btoa(JSON.stringify(indexes || null)),
                    },
                    type: "POST",
                    dataType: "json",
                }).then(function (response) {
                    defer.resolve(response);
                    self.trigger("schema-changed");
                }).fail(function (e) {
                    defer.reject(e);
                });
            }).promise();
        })(this.jq, this);
    };
    JQLDatabase.prototype.autoBind = function (bindingName, jqlExpressionBinding) {
        for (var i = 0, len = this.bindingProviders.length; i < len; i++) {
            if (this.bindingProviders[i].canBind(bindingName)) {
                jqlExpressionBinding.bind(this.bindingProviders[i].getBindedValue(bindingName));
                return true;
            }
        }
        return false;
    };
    JQLDatabase.prototype.withAutoBindingProvider = function (provider) {
        this.bindingProviders.push(provider);
        return this;
    };
    JQLDatabase.prototype.saveJQLFormConfiguration = function (configuration) {
        var _this = this;
        try {
            if (!Array.isArray(configuration)) {
                throw new Error("Array of IJQLv1FormEventConfiguration expected");
            }
            for (var i = 0, len = configuration.length; i < len; i++) {
                JQLValidatorV1Configuration.assertJQLV1ConfigurationStructure(configuration[i]);
            }
            var jqlV2Config_1 = JSON.parse(JSON.stringify(configuration));
            for (var i = 0, len = configuration.length; i < len; i++) {
                for (var j = 0, n = configuration[i].actions.length; j < n; j++) {
                    jqlV2Config_1[i].actions[j].statement = JQLGrammar.parse(configuration[i].actions[j].jql);
                }
            }
            return (function ($) {
                return $.Deferred(function (defer) {
                    $.ajax({
                        url: _this.rpcEndpointName,
                        data: {
                            action: "save-jql-configuration",
                            auth: _this.authorizationToken,
                            configuration: btoa(JSON.stringify(jqlV2Config_1)),
                        },
                        type: "POST",
                        dataType: "json",
                    }).then(function (response) {
                        defer.resolve(configuration);
                    }).fail(function (e) {
                        defer.reject(e);
                    });
                }).promise();
            })(this.jq);
        }
        catch (e) {
            return this.jq.Deferred(function (defer) {
                defer.reject(e);
            }).promise();
        }
    };
    return JQLDatabase;
}(EventEmitter));
var JQLDatabaseStatementExecutorSelect = (function () {
    function JQLDatabaseStatementExecutorSelect(statement, db) {
        this.statement = statement;
        this.db = db;
    }
    JQLDatabaseStatementExecutorSelect.prototype.execute = function () {
        var _this = this;
        return function () {
            return _this.db.getJQuery().Deferred(function (defer) {
                var rows;
                if (_this.statement.getTable()) {
                    _this.db.getTable(_this.statement.getTable().getName())
                        .fetch()
                        .then(function (table) {
                        try {
                            rows = _this.applyLimit(_this.applySorting(_this.getStatementCandidateRows(table)));
                            var result_1 = (new JQLStatementResultSelect()).addRows(rows);
                            if (_this.statement.getUnion()) {
                                (new JQLDatabaseStatementExecutorSelect(_this.statement.getUnion(), _this.db)).execute()().then(function (unionResult) {
                                    result_1.addRows(unionResult.getRows());
                                    defer.resolve(result_1);
                                }).fail(function (e) {
                                    defer.reject(e);
                                });
                            }
                            else {
                                defer.resolve(result_1);
                            }
                        }
                        catch (e) {
                            console.error(e);
                            defer.reject(new Error("Failed to execute INSERT statement!"));
                        }
                    })
                        .fail(function (e) {
                        console.error(e);
                        defer.reject(new Error("Failed to fetch table from server!"));
                    });
                }
                else {
                    try {
                        rows = [_this.createSingleStatementRow()];
                        var result_2 = (new JQLStatementResultSelect()).addRows(rows);
                        if (_this.statement.getUnion()) {
                            (new JQLDatabaseStatementExecutorSelect(_this.statement.getUnion(), _this.db)).execute()().then(function (unionResult) {
                                result_2.addRows(unionResult.getRows());
                                defer.resolve(result_2);
                            }).fail(function (e) {
                                defer.reject(e);
                            });
                        }
                        else {
                            defer.resolve(result_2);
                        }
                    }
                    catch (e) {
                        console.error(e);
                        defer.reject(new Error("Failed to execute INSERT statement!"));
                    }
                }
            }).promise();
        };
    };
    JQLDatabaseStatementExecutorSelect.prototype.createSingleStatementRow = function () {
        var result = Object.create(null), context = new JQLRow([], [], 0), fields = this.statement.getFields(), exprResult, fieldName;
        if (fields.isSelectingAllFields()) {
            return result;
        }
        for (var i = 0, fieldsList = fields, specificFields = fieldsList.getFields(), len = specificFields.length; i < len; i++) {
            fieldName = specificFields[i].getLiteral();
            exprResult = specificFields[i].getExpression().compute(context);
            if (null === fieldName) {
                fieldName = specificFields[i].getExpression().getLiteral();
            }
            result[fieldName] = exprResult;
        }
        return result;
    };
    JQLDatabaseStatementExecutorSelect.prototype.getStatementCandidateRows = function (table) {
        var iterator = table.createIterator(), row, result = [], tableFieldsList = table.describe(), statementFieldsList = this.statement.getFields(), isAllFields = statementFieldsList.isSelectingAllFields(), specificFieldsList = statementFieldsList, specificFieldsListCollection, o, exprResult, fieldName, addRow, where = this.statement.getFilter();
        if (!isAllFields) {
            specificFieldsListCollection = specificFieldsList.getFields();
        }
        while (row = iterator.next()) {
            if (!where) {
                addRow = true;
            }
            else {
                addRow = !!where.compute(row);
            }
            if (addRow) {
                if (isAllFields) {
                    result.push(row.toObject());
                }
                else {
                    o = Object.create(null);
                    for (var i = 0, len = specificFieldsListCollection.length; i < len; i++) {
                        fieldName = specificFieldsListCollection[i].getLiteral();
                        exprResult = specificFieldsListCollection[i].getExpression().compute(row);
                        if (null === fieldName) {
                            fieldName = specificFieldsListCollection[i].getExpression().getLiteral();
                        }
                        o[fieldName] = exprResult;
                    }
                    result.push(o);
                }
            }
        }
        return result;
    };
    JQLDatabaseStatementExecutorSelect.prototype.applySorting = function (rows) {
        var sorter = this.statement.getSorter();
        if (!sorter || rows.length < 2) {
            return rows;
        }
        if (sorter.isRandom()) {
            return JQLUtils.shuffleArray(rows);
        }
        var expressions = sorter.getSortExpressions(), numExpressions = expressions.length;
        var sortFunction = (function () {
            var walkers = [];
            for (var i = 0; i < numExpressions; i++) {
                if (i === numExpressions - 1) {
                    walkers.push((function (i) {
                        return function (a, b) {
                            var exprA = expressions[i].getExpression().compute(a), exprB = expressions[i].getExpression().compute(b), result = JQLUtils.compare(exprA, exprB);
                            if (expressions[i].getDirection() === EJQL_LEXER_ORDER_DIRECTION.DESCENDING) {
                                result = -result;
                            }
                            return result;
                        };
                    })(i));
                }
                else {
                    walkers.push((function (i) {
                        return function (a, b) {
                            var exprA = expressions[i].getExpression().compute(a), exprB = expressions[i].getExpression().compute(b), result = JQLUtils.compare(exprA, exprB);
                            if (expressions[i].getDirection() === EJQL_LEXER_ORDER_DIRECTION.DESCENDING) {
                                result = -result;
                            }
                            if (0 === result) {
                                return walkers[i + 1](a, b);
                            }
                            else {
                                return result;
                            }
                        };
                    })(i));
                }
            }
            return function (a, b) {
                return walkers[0](JQLRow.createFromObject(a), JQLRow.createFromObject(b));
            };
        })();
        return rows.sort(sortFunction);
    };
    JQLDatabaseStatementExecutorSelect.prototype.applyLimit = function (rows) {
        var limit = this.statement.getLimit();
        if (!limit) {
            return rows;
        }
        return rows.slice(limit.getSkip(), limit.getSkip() + limit.getLimit());
    };
    return JQLDatabaseStatementExecutorSelect;
}());
var JQLDatabaseStatementExecutorUpdate = (function () {
    function JQLDatabaseStatementExecutorUpdate(statement, db) {
        this.statement = statement;
        this.db = db;
    }
    JQLDatabaseStatementExecutorUpdate.prototype.execute = function () {
        var _this = this;
        return function () {
            return _this.db.getJQuery().Deferred(function (defer) {
                _this.db.getTable(_this.statement.getTable().getName())
                    .fetch()
                    .then(function (table) {
                    if (table.isTransactional()) {
                        table.startTransaction();
                    }
                    try {
                        _this.markedRowsForUpdate = [];
                        var iterator = table.createIterator(), row = void 0, addRow = void 0, where = _this.statement.getFilter();
                        while (row = iterator.next()) {
                            if (null === where) {
                                addRow = true;
                            }
                            else {
                                addRow = !!where.compute(row);
                            }
                            if (addRow) {
                                _this.markedRowsForUpdate.push({
                                    rowIndex: row.getRowIndex(),
                                    values: row.getDataAsArray(),
                                });
                            }
                        }
                        if (!_this.markedRowsForUpdate.length) {
                            if (table.isTransactional()) {
                                table.commitTransaction();
                            }
                            defer.resolve(new JQLStatementResult().withAffectedRows(0));
                            return;
                        }
                        _this.applySorting();
                        _this.applyLimits();
                        if (!_this.markedRowsForUpdate.length) {
                            if (table.isTransactional()) {
                                table.commitTransaction();
                            }
                            defer.resolve(new JQLStatementResult().withAffectedRows(0));
                            return;
                        }
                        var result = new JQLStatementResult().withAffectedRows(_this.markedRowsForUpdate.length), updateRow = JQLRow.createFromTable(table), updateExpressions = _this.statement.getFields(), numFields = updateExpressions.length, fieldName = void 0, newValue = void 0;
                        for (var i = 0, len = _this.markedRowsForUpdate.length; i < len; i++) {
                            updateRow.withIndex(_this.markedRowsForUpdate[i].rowIndex).withRowData(_this.markedRowsForUpdate[i].values);
                            for (var j = 0; j < numFields; j++) {
                                fieldName = updateExpressions[j].getFieldName();
                                newValue = updateExpressions[j].getExpression().compute(updateRow);
                                updateRow.setColumnValue(fieldName, newValue);
                            }
                            table.replace(_this.markedRowsForUpdate[i].rowIndex, updateRow.getDataAsArray());
                        }
                        table.reIndex();
                        if (table.isTransactional()) {
                            table.commitTransaction();
                        }
                        defer.resolve(result);
                    }
                    catch (e) {
                        console.error(e);
                        if (table.isTransactional()) {
                            table.rollbackTransaction();
                        }
                        defer.reject(new Error("Failed to execute UPDATE statement!"));
                    }
                })
                    .fail(function (e) {
                    console.error(e);
                    defer.reject(new Error("Failed to fetch table from server!"));
                });
            }).promise();
        };
    };
    JQLDatabaseStatementExecutorUpdate.prototype.applySorting = function () {
        var sorter = this.statement.getSorter(), table = this.db.getTable(this.statement.getTable().getName());
        if (!sorter || this.markedRowsForUpdate.length < 2) {
            return;
        }
        if (sorter.isRandom()) {
            return JQLUtils.shuffleArray(this.markedRowsForUpdate);
        }
        var expressions = sorter.getSortExpressions(), numExpressions = expressions.length;
        var sortFunction = (function () {
            var walkers = [];
            for (var i = 0; i < numExpressions; i++) {
                if (i === numExpressions - 1) {
                    walkers.push((function (i) {
                        return function (a, b) {
                            var exprA = expressions[i].getExpression().compute(a), exprB = expressions[i].getExpression().compute(b), result = JQLUtils.compare(exprA, exprB);
                            if (expressions[i].getDirection() === EJQL_LEXER_ORDER_DIRECTION.DESCENDING) {
                                result = -result;
                            }
                            return result;
                        };
                    })(i));
                }
                else {
                    walkers.push((function (i) {
                        return function (a, b) {
                            var exprA = expressions[i].getExpression().compute(a), exprB = expressions[i].getExpression().compute(b), result = JQLUtils.compare(exprA, exprB);
                            if (expressions[i].getDirection() === EJQL_LEXER_ORDER_DIRECTION.DESCENDING) {
                                result = -result;
                            }
                            if (0 === result) {
                                return walkers[i + 1](a, b);
                            }
                            else {
                                return result;
                            }
                        };
                    })(i));
                }
            }
            return function (a, b) {
                return walkers[0](JQLRow.createFromTable(table).withRowData(a.values).withIndex(-1), JQLRow.createFromTable(table).withRowData(b.values).withIndex(-1));
            };
        })();
        this.markedRowsForUpdate.sort(sortFunction);
    };
    JQLDatabaseStatementExecutorUpdate.prototype.applyLimits = function () {
        var limit = this.statement.getLimit();
        if (!limit) {
            return;
        }
        this.markedRowsForUpdate = this.markedRowsForUpdate.slice(limit.getSkip(), limit.getSkip() + limit.getLimit());
    };
    return JQLDatabaseStatementExecutorUpdate;
}());
var JQLDatabaseStatementExecutorInsert = (function () {
    function JQLDatabaseStatementExecutorInsert(statement, db) {
        this.statement = statement;
        this.db = db;
    }
    JQLDatabaseStatementExecutorInsert.prototype.execute = function () {
        var _this = this;
        return function () {
            return _this.db.getJQuery().Deferred(function (defer) {
                _this.db.getTable(_this.statement.getTable().getName())
                    .fetch()
                    .then(function (table) {
                    if (table.isTransactional()) {
                        table.startTransaction();
                    }
                    try {
                        var row = JQLRow.createFromTable(table);
                        for (var i = 0, fields = _this.statement.getFields(), len = fields.length; i < len; i++) {
                            row.setColumnValue(fields[i].getFieldName(), fields[i].getExpression().compute(row));
                        }
                        table.insertRow(row.getDataAsArray());
                        table.reIndex();
                        table.commitTransaction();
                        defer.resolve((new JQLStatementResult()).withAffectedRows(1));
                    }
                    catch (e) {
                        if (table.isTransactional()) {
                            table.rollbackTransaction();
                        }
                        console.error(e);
                        defer.reject(new Error('Failed to execute INSERT statement'));
                    }
                })
                    .fail(function (e) {
                    console.error(e);
                    defer.reject(new Error('Failed to fetch table from server!'));
                });
            }).promise();
        };
    };
    return JQLDatabaseStatementExecutorInsert;
}());
var JQLDatabaseStatementExecutorDelete = (function () {
    function JQLDatabaseStatementExecutorDelete(statement, db) {
        this.statement = statement;
        this.db = db;
    }
    JQLDatabaseStatementExecutorDelete.prototype.execute = function () {
        var _this = this;
        return function () {
            return _this.db.getJQuery().Deferred(function (defer) {
                _this.db.getTable(_this.statement.getTable().getName())
                    .fetch()
                    .then(function (table) {
                    if (table.isTransactional()) {
                        table.startTransaction();
                    }
                    try {
                        _this.markedRowsForDelete = [];
                        var iterator = table.createIterator(), row = void 0, addRow = void 0, where = _this.statement.getFilter();
                        while (row = iterator.next()) {
                            if (null === where) {
                                addRow = true;
                            }
                            else {
                                addRow = !!where.compute(row);
                            }
                            if (addRow) {
                                _this.markedRowsForDelete.push({
                                    rowIndex: row.getRowIndex(),
                                    values: row.getDataAsArray(),
                                });
                            }
                        }
                        if (!_this.markedRowsForDelete.length) {
                            if (table.isTransactional()) {
                                table.commitTransaction();
                            }
                            defer.resolve(new JQLStatementResult().withAffectedRows(0));
                            return;
                        }
                        _this.applySorting();
                        _this.applyLimits();
                        if (!_this.markedRowsForDelete.length) {
                            if (table.isTransactional()) {
                                table.commitTransaction();
                            }
                            defer.resolve(new JQLStatementResult().withAffectedRows(0));
                            return;
                        }
                        for (var i = 0, len = _this.markedRowsForDelete.length; i < len; i++) {
                            table.deleteRow(_this.markedRowsForDelete[i].rowIndex);
                        }
                        table.compact();
                        if (table.isTransactional()) {
                            table.commitTransaction();
                        }
                        defer.resolve(new JQLStatementResult().withAffectedRows(_this.markedRowsForDelete.length));
                    }
                    catch (e) {
                        console.error(e);
                        if (table.isTransactional()) {
                            table.rollbackTransaction();
                        }
                        defer.reject(new Error('Failed to execute DELETE statement!'));
                    }
                })
                    .fail(function (e) {
                    console.error(e);
                    defer.reject(new Error('Failed to fetch table from server!'));
                });
            }).promise();
        };
    };
    JQLDatabaseStatementExecutorDelete.prototype.applySorting = function () {
        var sorter = this.statement.getSorter(), table = this.db.getTable(this.statement.getTable().getName());
        if (!sorter || this.markedRowsForDelete.length < 2) {
            return;
        }
        if (sorter.isRandom()) {
            return JQLUtils.shuffleArray(this.markedRowsForDelete);
        }
        var expressions = sorter.getSortExpressions(), numExpressions = expressions.length;
        var sortFunction = (function () {
            var walkers = [];
            for (var i = 0; i < numExpressions; i++) {
                if (i === numExpressions - 1) {
                    walkers.push((function (i) {
                        return function (a, b) {
                            var exprA = expressions[i].getExpression().compute(a), exprB = expressions[i].getExpression().compute(b), result = JQLUtils.compare(exprA, exprB);
                            if (expressions[i].getDirection() === EJQL_LEXER_ORDER_DIRECTION.DESCENDING) {
                                result = -result;
                            }
                            return result;
                        };
                    })(i));
                }
                else {
                    walkers.push((function (i) {
                        return function (a, b) {
                            var exprA = expressions[i].getExpression().compute(a), exprB = expressions[i].getExpression().compute(b), result = JQLUtils.compare(exprA, exprB);
                            if (expressions[i].getDirection() === EJQL_LEXER_ORDER_DIRECTION.DESCENDING) {
                                result = -result;
                            }
                            if (0 === result) {
                                return walkers[i + 1](a, b);
                            }
                            else {
                                return result;
                            }
                        };
                    })(i));
                }
            }
            return function (a, b) {
                return walkers[0](JQLRow.createFromTable(table).withRowData(a.values).withIndex(-1), JQLRow.createFromTable(table).withRowData(b.values).withIndex(-1));
            };
        })();
        this.markedRowsForDelete.sort(sortFunction);
    };
    JQLDatabaseStatementExecutorDelete.prototype.applyLimits = function () {
        var limit = this.statement.getLimit();
        if (!limit) {
            return;
        }
        this.markedRowsForDelete = this.markedRowsForDelete.slice(limit.getSkip(), limit.getSkip() + limit.getLimit());
    };
    return JQLDatabaseStatementExecutorDelete;
}());
var JQLDatabaseStatementExecutorRemoteStatement = (function () {
    function JQLDatabaseStatementExecutorRemoteStatement(statement, db) {
        this.statement = statement;
        this.db = db;
    }
    JQLDatabaseStatementExecutorRemoteStatement.prototype.execute = function () {
        var _this = this;
        return function () {
            return _this.db.getJQuery().Deferred(function (defer) {
                var rpcEndpointName = _this.db.getRPCEndpointName(), query = {
                    "auth": _this.db.getAuthorizationToken(),
                    "query": btoa(JSON.stringify(_this.statement.getTokenizedStatement())),
                    "bindings": btoa(JSON.stringify(_this.statement.getBindingData())),
                };
                _this.db.getJQuery().ajax({
                    url: _this.db.getRPCEndpointName() + "?action=query",
                    type: "POST",
                    dataType: "json",
                    data: query,
                }).then(function (result) {
                    defer.resolve(_this.createStatementResult(result));
                }).fail(function (e) {
                    console.error("args: ", arguments);
                    defer.reject(e);
                });
            }).promise();
        };
    };
    JQLDatabaseStatementExecutorRemoteStatement.prototype.createStatementResult = function (serverResponse) {
        if (!(serverResponse instanceof Object)) {
            throw new Error("Object expected!");
        }
        if (undefined === serverResponse.resultType) {
            throw new Error("Property \"resultType\" expected!");
        }
        switch (serverResponse.resultType) {
            case EJQL_LEXER_STATEMENT_TYPES.SELECT:
                var selectResult = new JQLStatementResultSelect();
                selectResult.addRows(serverResponse.rows);
                return selectResult;
            case EJQL_LEXER_STATEMENT_TYPES.UPDATE:
                var updateResult = new JQLStatementResult();
                updateResult.withAffectedRows(parseInt(serverResponse.affectedRows) || 0);
                return updateResult;
            case EJQL_LEXER_STATEMENT_TYPES.INSERT:
                var insertResult = new JQLStatementResultInsert();
                insertResult.withLastInsertId(parseInt(serverResponse.lastInsertId) || 0);
                insertResult.withAffectedRows(1);
                return insertResult;
            case EJQL_LEXER_STATEMENT_TYPES.DELETE:
                var deleteResult = new JQLStatementResult();
                deleteResult.withAffectedRows(parseInt(serverResponse.affectedRows) || 0);
                return deleteResult;
            default:
                throw new Error("Invalid server response resultType: " + JSON.stringify(serverResponse.resultType));
        }
    };
    return JQLDatabaseStatementExecutorRemoteStatement;
}());
var JQLTable = (function () {
    function JQLTable(identifiers) {
        this.identifiers = [];
        this.emptyRow = [];
        this.indexes = [];
        this.autoIncrementColumnIndex = null;
        this.autoIncrementValue = 1;
        for (var i = 0, idtf = identifiers || [], len = idtf.length; i < len; i++) {
            this.identifiers.push(idtf[i]);
            if (undefined !== idtf[i].default) {
                this.emptyRow.push(idtf[i].default);
            }
            else {
                switch (identifiers[i].type) {
                    case EJQLTableColumnType.NULL:
                        this.emptyRow.push(null);
                        break;
                    case EJQLTableColumnType.NUMBER:
                        this.emptyRow.push(0);
                        break;
                    case EJQLTableColumnType.STRING:
                        this.emptyRow.push("");
                        break;
                    case EJQLTableColumnType.BOOLEAN:
                        this.emptyRow.push(false);
                        break;
                    default:
                        this.emptyRow.push(null);
                }
            }
        }
    }
    JQLTable.prototype.withSingleColumnIndex = function (indexDescriptor) {
        var index, numberOfAutoIncrementIndexes = 0;
        if (this.indexes) {
            for (var i = 0, len = this.indexes.length; i < len; i++) {
                if (this.indexes[i].isAutoIncrement()) {
                    numberOfAutoIncrementIndexes++;
                }
            }
        }
        if ((undefined !== indexDescriptor.unique && indexDescriptor.unique) || (undefined !== indexDescriptor.autoIncrement && indexDescriptor.autoIncrement)) {
            index = JQLTableIndex.createFromIndexDescriptor(this, indexDescriptor);
            if (index.isAutoIncrement()) {
                numberOfAutoIncrementIndexes++;
                if (index.getDescriptors().length > 1) {
                    throw new Error("Auto-increment indexes must refer to a single column only!");
                }
                if (numberOfAutoIncrementIndexes > 1) {
                    throw new Error("There can be only a single auto-increment index!");
                }
                if (!index.isUnique()) {
                    throw new Error("Auto-increment indexes must be unique!");
                }
                var autoIncrementColumnFound = false;
                for (var i = 0, len = this.identifiers.length; i < len; i++) {
                    if (this.identifiers[i].name === indexDescriptor.name) {
                        this.autoIncrementColumnIndex = i;
                        autoIncrementColumnFound = true;
                        if (this.identifiers[i].type !== EJQLTableColumnType.NUMBER) {
                            throw new Error("Auto-increment index column type must be NUMBER!");
                        }
                        break;
                    }
                }
                if (!autoIncrementColumnFound) {
                    throw new Error("Cannot add a index on a non-existing column!");
                }
            }
            this.indexes.push(index);
        }
        return this;
    };
    JQLTable.prototype.describe = function () {
        return this.identifiers.slice(0);
    };
    JQLTable.prototype.hasIdentifier = function (identifierName) {
        for (var i = 0, len = this.identifiers.length; i < len; i++) {
            if (this.identifiers[i].name === identifierName) {
                return true;
            }
        }
        return false;
    };
    JQLTable.createVirtualTable = function (columnDefinitions) {
        return new JQLTableStorageEngineInMemoryVirtualTable(columnDefinitions);
    };
    JQLTable.createFromInMemoryArrayOfObjects = function (rows, columnDefinitions, indexes) {
        var identifiers = undefined === columnDefinitions
            ? JQLUtils.getColumnDefinitions(rows)
            : columnDefinitions, schema = [], ncols = identifiers.length, row, v, vType;
        if (!identifiers.length) {
            throw new Error("No valid columns were detected in \"in-memory\" array!");
        }
        for (var i = 0, len = rows.length; i < len; i++) {
            row = [];
            for (var col = 0; col < ncols; col++) {
                v = rows[i][identifiers[col].name];
                vType = JQLUtils.getType(v);
                if (vType === null || vType !== identifiers[col].type) {
                    v = null;
                }
                row.push(v);
            }
            schema.push(row);
        }
        return new JQLTableStorageEngineInMemory(identifiers, schema, indexes);
    };
    JQLTable.createFromRemoteTableDefinition = function (columns, indexes) {
        return new JQLTableStorageEngineRemote(columns, indexes);
    };
    JQLTable.prototype.createEmptyRow = function () {
        return this.emptyRow.slice(0);
    };
    JQLTable.prototype.getIndexes = function () {
        return this.indexes;
    };
    JQLTable.prototype.reIndex = function () {
        for (var i = 0, len = this.indexes.length; i < len; i++) {
            this.indexes[i].index();
            if (this.indexes[i].isAutoIncrement()) {
                this.setNextAutoIncrementValue(this.indexes[i].getNextAutoIncrementValue());
            }
        }
    };
    JQLTable.prototype.fetch = function () {
        var _this = this;
        return jQuery.Deferred(function (defer) {
            defer.resolve(_this);
        }).promise();
    };
    return JQLTable;
}());
var UnfetchedTable = (function () {
    function UnfetchedTable(definitions, db) {
        this.identifiers = [];
        this.indexes = [];
        this.deferredTable = null;
        this.db = db;
        this.name = definitions.name;
        this.remote = definitions.storageEngine === EJQLTableStorageEngine.REMOTE;
        this.storageEngine = definitions.storageEngine;
        this.computeIdentifiers(definitions.schema);
        this.computeIndexDescriptors(definitions.indexes);
    }
    UnfetchedTable.prototype.describe = function () {
        return this.identifiers;
    };
    UnfetchedTable.prototype.hasIdentifier = function (identifierName) {
        for (var i = 0, len = this.identifiers.length; i < len; i++) {
            if (this.identifiers[i].name === identifierName) {
                return true;
            }
        }
        return false;
    };
    UnfetchedTable.prototype.isRemote = function () {
        return this.remote;
    };
    UnfetchedTable.prototype.fetch = function () {
        var _this = this;
        if (this.table) {
            return this.table;
        }
        if (!this.isRemote()) {
            this.table = (function ($, db) {
                return $.Deferred(function (defer) {
                    var fetchTableRequest = {
                        "action": "fetch-table",
                        "auth": db.getAuthorizationToken(),
                        "name": _this.name,
                    };
                    $.ajax({
                        type: "POST",
                        url: db.getRPCEndpointName(),
                        data: fetchTableRequest,
                    }).then(function (result) {
                        _this.deferredTable = JQLTable.createFromInMemoryArrayOfObjects(result, _this.identifiers, _this.indexes);
                        defer.resolve(_this.deferredTable);
                    }).fail(function (e) {
                        defer.reject(e);
                    });
                }).promise();
            })(this.db.getJQuery(), this.db);
        }
        else {
            this.table = (function ($) {
                return $.Deferred(function (defer) {
                    _this.deferredTable = JQLTable.createFromRemoteTableDefinition(_this.describe(), _this.indexes);
                    defer.resolve(_this.deferredTable);
                }).promise();
            })(this.db.getJQuery());
        }
        return this.table;
    };
    UnfetchedTable.prototype.getStorageEngine = function () {
        return this.storageEngine;
    };
    UnfetchedTable.prototype.computeIdentifiers = function (schema) {
        for (var identifierName in schema) {
            if (schema.hasOwnProperty(identifierName)) {
                this.identifiers.push({
                    name: identifierName,
                    type: UnfetchedTable.castBackendDataTypeToFrontendDataType(schema[identifierName]),
                    default: null,
                });
            }
        }
    };
    UnfetchedTable.prototype.computeIndexDescriptors = function (indexes) {
        if (indexes) {
            if (!Array.isArray(indexes)) {
                throw new Error("Invalid argument: indexes: array expected!");
            }
            for (var i = 0, len = indexes.length; i < len; i++) {
                this.indexes.push(indexes[i]);
            }
        }
    };
    UnfetchedTable.castBackendDataTypeToFrontendDataType = function (dataType) {
        switch (dataType) {
            case EJQLBackendTableColumnType.BOOLEAN:
                return EJQLTableColumnType.BOOLEAN;
            case EJQLBackendTableColumnType.FLOAT:
            case EJQLBackendTableColumnType.INT:
                return EJQLTableColumnType.NUMBER;
            case EJQLBackendTableColumnType.STRING:
                return EJQLTableColumnType.STRING;
            default:
                return EJQLTableColumnType.NULL;
        }
    };
    UnfetchedTable.prototype.getIndexes = function () {
        if (this.deferredTable) {
            return this.deferredTable.getIndexes();
        }
        var result = [];
        for (var i = 0, len = (this.indexes || []).length; i < len; i++) {
            result.push(JQLTableIndex.createFromIndexDescriptor(this, this.indexes[i]));
        }
        return result;
    };
    UnfetchedTable.prototype.alterIndexes = function (indexes) {
        var _this = this;
        return (function ($) {
            return $.Deferred(function (defer) {
                _this.db.alterTableIndexes(_this.name, indexes).then(function (tableModel) {
                    _this.deferredTable = null;
                    _this.indexes = tableModel.indexes;
                    defer.resolve(true);
                }).fail(function (e) {
                    defer.reject(e);
                });
            }).promise();
        })(this.db.getJQuery());
    };
    UnfetchedTable.prototype.isIndexable = function () {
        if (this.deferredTable) {
            return this.deferredTable.isIndexable();
        }
        return true;
    };
    UnfetchedTable.prototype.isVirtual = function () {
        if (this.deferredTable) {
            return this.deferredTable.isVirtual();
        }
        return false;
    };
    UnfetchedTable.prototype.isTransactional = function () {
        if (this.deferredTable) {
            return this.deferredTable.isTransactional();
        }
        return true;
    };
    return UnfetchedTable;
}());
var JQLTableIndex = (function () {
    function JQLTableIndex(table, descriptors) {
        this.table = table;
        this.descriptors = (descriptors || []).slice(0);
    }
    JQLTableIndex.prototype.getDescriptors = function () {
        return this.descriptors;
    };
    JQLTableIndex.prototype.getTable = function () {
        return this.table;
    };
    JQLTableIndex.createFromIndexDescriptor = function (table, indexDescriptor) {
        if (table.getStorageEngine() === EJQLTableStorageEngine.IN_MEMORY) {
            return new JQLTableIndexSingleColumn(table, indexDescriptor);
        }
        else {
            return new JQLTableIndexBackend(table, indexDescriptor);
        }
    };
    return JQLTableIndex;
}());
var JQLTableIndexSingleColumn = (function (_super) {
    __extends(JQLTableIndexSingleColumn, _super);
    function JQLTableIndexSingleColumn(table, indexDescriptor) {
        var _this = _super.call(this, table, [indexDescriptor]) || this;
        _this.maxAutoIncrement = 0;
        _this.unique = !!indexDescriptor.unique;
        _this.autoIncrement = !!indexDescriptor.autoIncrement;
        return _this;
    }
    JQLTableIndexSingleColumn.prototype.isUnique = function () {
        return this.unique;
    };
    JQLTableIndexSingleColumn.prototype.isAutoIncrement = function () {
        return this.autoIncrement;
    };
    JQLTableIndexSingleColumn.prototype.getNextAutoIncrementValue = function () {
        if (this.autoIncrement) {
            return this.maxAutoIncrement + 1;
        }
        else {
            throw new Error('Index is not auto-increment!');
        }
    };
    JQLTableIndexSingleColumn.prototype.index = function () {
        this.values = [];
        var row, iterator = this.table.createIterator(), value;
        this.maxAutoIncrement = 0;
        while (row = iterator.next()) {
            var rowIndexedValue = String(row.getColumnValue(this.descriptors[0].name)).toLowerCase();
            if (this.values.indexOf(value = rowIndexedValue) > -1) {
                throw new Error('Duplicate key ' + JSON.stringify(this.descriptors[0].name) + ' found with value ' + JSON.stringify(value) + ' found!');
            }
            else {
                this.values.push(value);
                if (this.autoIncrement) {
                    this.maxAutoIncrement = Math.max(this.maxAutoIncrement, Number(value));
                }
            }
        }
    };
    return JQLTableIndexSingleColumn;
}(JQLTableIndex));
var JQLTableIndexBackend = (function (_super) {
    __extends(JQLTableIndexBackend, _super);
    function JQLTableIndexBackend(table, indexDescriptor) {
        return _super.call(this, table, [indexDescriptor]) || this;
    }
    JQLTableIndexBackend.prototype.isUnique = function () {
        return true;
    };
    JQLTableIndexBackend.prototype.isAutoIncrement = function () {
        return null;
    };
    JQLTableIndexBackend.prototype.getNextAutoIncrementValue = function () {
        return null;
    };
    JQLTableIndexBackend.prototype.index = function () {
    };
    return JQLTableIndexBackend;
}(JQLTableIndex));
var JQLTableStorageEngineInMemory = (function (_super) {
    __extends(JQLTableStorageEngineInMemory, _super);
    function JQLTableStorageEngineInMemory(identifiers, rows, indexes) {
        var _this = _super.call(this, identifiers) || this;
        _this.rows = [];
        for (var i = 0, len = rows.length; i < len; i++) {
            _this.rows.push(rows[i]);
        }
        if (indexes) {
            if (!Array.isArray(indexes)) {
                throw new Error("Invalid class constructor argument: indexes: Expected array!");
            }
            for (var i = 0, len = indexes.length; i < len; i++) {
                _this.withSingleColumnIndex(indexes[i]);
            }
            _this.reIndex();
        }
        return _this;
    }
    JQLTableStorageEngineInMemory.prototype.isRemote = function () {
        return false;
    };
    JQLTableStorageEngineInMemory.prototype.getStorageEngine = function () {
        return EJQLTableStorageEngine.IN_MEMORY;
    };
    JQLTableStorageEngineInMemory.prototype.getRowAt = function (rowIndex) {
        return this.rows[rowIndex] || null;
    };
    JQLTableStorageEngineInMemory.prototype.createIterator = function () {
        return new JQLTableUtilsIterator(this);
    };
    JQLTableStorageEngineInMemory.prototype.replace = function (index, newRow) {
        if (this.rows[index]) {
            for (var i = 0, len = this.rows[index].length; i < len; i++) {
                this.rows[index][i] = newRow[i];
            }
        }
        else {
            throw new Error("Undefined table index: " + JSON.stringify(index));
        }
    };
    JQLTableStorageEngineInMemory.prototype.deleteRow = function (rowIndex) {
        if (this.rows[rowIndex]) {
            this.rows[rowIndex] = null;
        }
    };
    JQLTableStorageEngineInMemory.prototype.insertRow = function (row) {
        if (!row || undefined === row.length) {
            throw new Error("Invalid argument row: array expected!");
        }
        if (row.length !== this.identifiers.length) {
            throw new Error("Row mismatch: Expected " + this.identifiers.length + " values, got " + row.length + " values!");
        }
        if (this.autoIncrementColumnIndex !== null) {
            if (null === row[this.autoIncrementColumnIndex]) {
                row[this.autoIncrementColumnIndex] = this.autoIncrementValue;
                this.autoIncrementValue++;
            }
        }
        this.rows.push(row);
    };
    JQLTableStorageEngineInMemory.prototype.compact = function () {
        for (var i = this.rows.length - 1; i >= 0; i--) {
            if (null === this.rows[i]) {
                this.rows.splice(i, 1);
            }
        }
    };
    JQLTableStorageEngineInMemory.prototype.isTransactional = function () {
        return true;
    };
    JQLTableStorageEngineInMemory.prototype.startTransaction = function () {
        this.lastTransactionSnapshot = JSON.stringify(this.rows);
    };
    JQLTableStorageEngineInMemory.prototype.commitTransaction = function () {
        if (this.lastTransactionSnapshot !== undefined) {
            this.lastTransactionSnapshot = undefined;
        }
        else {
            throw new Error("No transaction started before!\"");
        }
    };
    JQLTableStorageEngineInMemory.prototype.rollbackTransaction = function () {
        if (this.lastTransactionSnapshot !== undefined) {
            this.rows = JSON.parse(this.lastTransactionSnapshot);
        }
        else {
            throw new Error("Failed to rollback transaction: No transaction started before!");
        }
    };
    JQLTableStorageEngineInMemory.prototype.getNextAutoIncrementValue = function () {
        return this.autoIncrementValue + 1;
    };
    JQLTableStorageEngineInMemory.prototype.setNextAutoIncrementValue = function (value) {
        if ("number" !== typeof value || !isFinite(value)) {
            throw new Error("Value is not finite!");
        }
        if (value % 1 !== 0) {
            throw new Error("Value must be integer!");
        }
        if (value < 1) {
            throw new Error("Value must be greater than 0!");
        }
        this.autoIncrementValue = value;
    };
    JQLTableStorageEngineInMemory.prototype.alterIndexes = function (indexes) {
        return null;
    };
    JQLTableStorageEngineInMemory.prototype.isIndexable = function () {
        return true;
    };
    JQLTableStorageEngineInMemory.prototype.isVirtual = function () {
        return false;
    };
    return JQLTableStorageEngineInMemory;
}(JQLTable));
var JQLTableStorageEngineInMemoryVirtualTable = (function (_super) {
    __extends(JQLTableStorageEngineInMemoryVirtualTable, _super);
    function JQLTableStorageEngineInMemoryVirtualTable(identifiers) {
        return _super.call(this, identifiers, [], undefined) || this;
    }
    JQLTableStorageEngineInMemoryVirtualTable.prototype.createRow = function () {
        var result = new JQLTableStorageEngineInMemoryVirtualRow(this);
        this.rows.push(result);
        return result;
    };
    JQLTableStorageEngineInMemoryVirtualTable.prototype.withSingleColumnIndex = function (indexDescriptor) {
        throw new Error("Cannot add indexes on virtual tables!");
    };
    JQLTableStorageEngineInMemoryVirtualTable.prototype.replace = function (index, newRow) {
        throw new Error("Cannot replace rows on virtual tables!");
    };
    JQLTableStorageEngineInMemoryVirtualTable.prototype.insertRow = function (row) {
        throw new Error("Cannot insert rows on virtual tables!");
    };
    JQLTableStorageEngineInMemoryVirtualTable.prototype.deleteRow = function (rowIndex) {
        throw new Error("Cannot delete rows from virtual tables!");
    };
    JQLTableStorageEngineInMemoryVirtualTable.prototype.isTransactional = function () {
        return false;
    };
    JQLTableStorageEngineInMemoryVirtualTable.prototype.startTransaction = function () {
        throw new Error("Transactions are not supported on virtual tables!");
    };
    JQLTableStorageEngineInMemoryVirtualTable.prototype.commitTransaction = function () {
        throw new Error("Transactions are not supported on virtual tables!");
    };
    JQLTableStorageEngineInMemoryVirtualTable.prototype.rollbackTransaction = function () {
        throw new Error("Transactions are not supported on virtual tables!");
    };
    JQLTableStorageEngineInMemoryVirtualTable.prototype.getNextAutoIncrementValue = function () {
        return 1;
    };
    JQLTableStorageEngineInMemoryVirtualTable.prototype.isIndexable = function () {
        return false;
    };
    JQLTableStorageEngineInMemoryVirtualTable.prototype.isVirtual = function () {
        return true;
    };
    return JQLTableStorageEngineInMemoryVirtualTable;
}(JQLTableStorageEngineInMemory));
var JQLTableStorageEngineInMemoryVirtualRow = (function () {
    function JQLTableStorageEngineInMemoryVirtualRow(table) {
        this.table = table;
        this.data = Object.create(null);
        for (var i = 0, identifiers = this.table.describe(), len = identifiers.length; i < len; i++) {
            (function (identifierIndex, identifierName, self) {
                Object.defineProperty(self, String(identifierIndex), {
                    get: function () {
                        return (undefined === self.data[identifierName] || undefined === self.data[identifierName].get)
                            ? undefined
                            : self.data[identifierName].get();
                    },
                    set: function (value) {
                        if (undefined === self.data[identifierName] || undefined === self.data[identifierName].set) {
                            throw new Error("Value \"" + identifierName + "\" is read-only!");
                        }
                        else {
                            self.data[identifierName].set(value);
                        }
                    },
                    enumerable: true,
                    configurable: false,
                });
            })(i, identifiers[i].name, this);
            this.cols = i + 1;
        }
    }
    Object.defineProperty(JQLTableStorageEngineInMemoryVirtualRow.prototype, "length", {
        get: function () {
            return this.cols;
        },
        enumerable: true,
        configurable: true
    });
    JQLTableStorageEngineInMemoryVirtualRow.prototype.withPropertySetter = function (propertyName, setter) {
        if (this.table.hasIdentifier(propertyName)) {
            this.data[propertyName] = this.data[propertyName] || Object.create(null);
            this.data[propertyName].set = setter;
        }
        else {
            throw new Error("Property \"" + propertyName + "\" is not allowed!");
        }
        return this;
    };
    JQLTableStorageEngineInMemoryVirtualRow.prototype.withPropertyGetter = function (propertyName, getter) {
        if (this.table.hasIdentifier(propertyName)) {
            this.data[propertyName] = this.data[propertyName] || Object.create(null);
            this.data[propertyName].get = getter;
        }
        else {
            throw new Error("Property \"" + propertyName + "\" is not allowed!");
        }
        return this;
    };
    return JQLTableStorageEngineInMemoryVirtualRow;
}());
var JQLTableStorageEngineRemote = (function (_super) {
    __extends(JQLTableStorageEngineRemote, _super);
    function JQLTableStorageEngineRemote(identifiers, indexes) {
        var _this = _super.call(this, identifiers) || this;
        if (indexes) {
            if (!Array.isArray(indexes)) {
                throw new Error("Invalid class constructor argument: indexes: Expected array!");
            }
            for (var i = 0, len = indexes.length; i < len; i++) {
                _this.withSingleColumnIndex(indexes[i]);
            }
        }
        return _this;
    }
    JQLTableStorageEngineRemote.prototype.isRemote = function () {
        return true;
    };
    JQLTableStorageEngineRemote.prototype.getStorageEngine = function () {
        return EJQLTableStorageEngine.REMOTE;
    };
    JQLTableStorageEngineRemote.prototype.isTransactional = function () {
        return false;
    };
    JQLTableStorageEngineRemote.prototype.startTransaction = function () {
        throw new Error('Operation handled by backend!');
    };
    JQLTableStorageEngineRemote.prototype.commitTransaction = function () {
        throw new Error('Operation handled by backend!');
    };
    JQLTableStorageEngineRemote.prototype.rollbackTransaction = function () {
        throw new Error('Operation handled by backend!');
    };
    JQLTableStorageEngineRemote.prototype.getNextAutoIncrementValue = function () {
        throw new Error('Operation handled by backend!');
    };
    JQLTableStorageEngineRemote.prototype.setNextAutoIncrementValue = function (nextAutoIncrementValue) {
        throw new Error('Operation handled by backend!');
    };
    JQLTableStorageEngineRemote.prototype.alterIndexes = function (indexes) {
        return null;
    };
    JQLTableStorageEngineRemote.prototype.isIndexable = function () {
        return true;
    };
    JQLTableStorageEngineRemote.prototype.isVirtual = function () {
        return false;
    };
    return JQLTableStorageEngineRemote;
}(JQLTable));
var JQLTableUtilsIterator = (function () {
    function JQLTableUtilsIterator(table) {
        this.index = 0;
        this.table = table;
        this.row = new JQLRow(table.describe(), null, null);
    }
    JQLTableUtilsIterator.prototype.next = function () {
        var data = this.table.getRowAt(this.index);
        if (null === data) {
            return null;
        }
        this.row.withIndex(this.index);
        this.row.withRowData(data);
        this.index++;
        return this.row;
    };
    return JQLTableUtilsIterator;
}());
var JQLRow = (function () {
    function JQLRow(columns, data, index) {
        this.columns = {};
        this.data = [];
        this.numColumns = columns.length;
        for (var i = 0; i < this.numColumns; i++) {
            this.columns[columns[i].name] = { type: columns[i].type, index: i };
        }
        this.data = data;
        this.rowIndex = index;
    }
    JQLRow.prototype.withIndex = function (index) {
        this.rowIndex = index;
        return this;
    };
    JQLRow.prototype.withRowData = function (data) {
        this.data = data;
        return this;
    };
    JQLRow.prototype.getDataAsArray = function () {
        return this.data;
    };
    JQLRow.prototype.getColumnValue = function (columnName) {
        return this.data[this.columns[columnName].index];
    };
    JQLRow.prototype.setColumnValue = function (columnName, columnValue) {
        this.data[this.columns[columnName].index] = columnValue;
    };
    JQLRow.prototype.toObject = function () {
        var result = Object.create(null), v;
        for (var columnName in this.columns) {
            v = this.data[this.columns[columnName].index];
            if (v === undefined) {
                v = null;
            }
            result[columnName] = v;
        }
        return result;
    };
    JQLRow.prototype.getRowIndex = function () {
        return this.rowIndex;
    };
    JQLRow.createFromObject = function (o) {
        var columns = [], values = [];
        for (var k in o) {
            columns.push({
                type: EJQLTableColumnType.NULL,
                name: k
            });
            values.push(o[k]);
        }
        return new JQLRow(columns, values, 0);
    };
    JQLRow.createFromTable = function (table) {
        return new JQLRow(table.describe(), table.createEmptyRow(), undefined);
    };
    return JQLRow;
}());
var JQLDatabaseQueryPlanner = (function () {
    function JQLDatabaseQueryPlanner(database) {
        this.queryId = 0;
        this.queue = [];
        this.running = false;
        this.database = database;
    }
    JQLDatabaseQueryPlanner.prototype.scheduleStatement = function (statement, strategy) {
        return (function (self, $) {
            return $.Deferred(function (defer) {
                self.queryId++;
                self.queue.push({
                    queryId: self.queryId,
                    statement: statement,
                    strategy: strategy,
                    defer: defer,
                });
                if (1 === self.queue.length && !self.running) {
                    self.next();
                }
            }).promise();
        })(this, this.database.getJQuery());
    };
    JQLDatabaseQueryPlanner.prototype.next = function () {
        var _this = this;
        if (this.running) {
            return;
        }
        var item = this.queue.shift();
        if (undefined === item) {
            return;
        }
        this.running = true;
        item.strategy().then(function (result) {
            item.defer.resolve(result);
        }).fail(function (e) {
            item.defer.reject(e);
        }).always(function () {
            _this.running = false;
            if (0 !== _this.queue.length) {
                _this.next();
            }
        });
    };
    return JQLDatabaseQueryPlanner;
}());
var JQLOpcode = (function () {
    function JQLOpcode() {
    }
    return JQLOpcode;
}());
var JQLStatement = (function (_super) {
    __extends(JQLStatement, _super);
    function JQLStatement(token) {
        var _this = _super.call(this) || this;
        _this.remote = token.remote;
        _this.statement = token;
        return _this;
    }
    JQLStatement.prototype.getOpcodeType = function () {
        return EJQL_LEXER_OPCODE_TYPES.STATEMENT;
    };
    JQLStatement.prototype.isRemote = function () {
        return this.remote;
    };
    JQLStatement.prototype.bind = function (data, db) {
        this.binded = false;
        var bindings = this.getBindings(), numBindings = bindings.length, bindingName;
        for (var i = 0; i < numBindings; i++) {
            bindings[i].unbind();
        }
        for (var i = 0; i < numBindings; i++) {
            bindingName = bindings[i].getBindingName();
            if (undefined === data[bindingName]) {
                if (!db || !db.autoBind(bindingName, bindings[i])) {
                    throw new Error("Failed to bind statement: Binding " + JSON.stringify(bindingName) + " is not defined in bind object, and is also not auto bindable!");
                }
            }
            else {
                bindings[i].bind(data[bindingName]);
            }
        }
        this.binded = true;
        return this;
    };
    JQLStatement.prototype.getBindingData = function () {
        var bindData = {}, bindings = this.getBindings(), bindingName;
        for (var i = 0, len = bindings.length; i < len; i++) {
            if (undefined === bindData[bindingName = bindings[i].getBindingName()]) {
                bindData[bindingName] = bindings[i].getBindedValue();
            }
        }
        return bindData;
    };
    JQLStatement.prototype.isBinded = function () {
        return this.binded;
    };
    JQLStatement.prototype.getTokenizedStatement = function () {
        return JSON.parse(JSON.stringify(this.statement));
    };
    return JQLStatement;
}(JQLOpcode));
var JQLTableReference = (function (_super) {
    __extends(JQLTableReference, _super);
    function JQLTableReference(opcode) {
        var _this = _super.call(this) || this;
        _this.name = opcode.name;
        return _this;
    }
    JQLTableReference.prototype.getOpcodeType = function () {
        return EJQL_LEXER_OPCODE_TYPES.TABLE;
    };
    JQLTableReference.prototype.getName = function () {
        return this.name;
    };
    return JQLTableReference;
}(JQLOpcode));
var JQLExpression = (function (_super) {
    __extends(JQLExpression, _super);
    function JQLExpression() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpression.prototype.getOpcodeType = function () {
        return EJQL_LEXER_OPCODE_TYPES.EXPRESSION;
    };
    JQLExpression.prototype.getLiteral = function () {
        if (undefined !== this.literal) {
            return this.literal;
        }
        this.literal = this.toString().replace(/["']+/g, '').trim();
        return this.literal;
    };
    return JQLExpression;
}(JQLOpcode));
var JQLExpressionBinding = (function (_super) {
    __extends(JQLExpressionBinding, _super);
    function JQLExpressionBinding(token) {
        var _this = _super.call(this) || this;
        _this.bindingName = token.name;
        return _this;
    }
    JQLExpressionBinding.prototype.getExpressionType = function () {
        return EJQL_LEXER_EXPRESSION_TYPES.BINDING;
    };
    JQLExpressionBinding.prototype.getBindingName = function () {
        return this.bindingName;
    };
    JQLExpressionBinding.prototype.getBindedValue = function () {
        if (undefined === this.bindingValue) {
            throw new Error("Binding " + JSON.stringify(this.bindingName) + " is not binded!");
        }
        return this.bindingValue;
    };
    JQLExpressionBinding.prototype.getBindings = function () {
        return [this];
    };
    JQLExpressionBinding.prototype.getFunctions = function () {
        return [];
    };
    JQLExpressionBinding.prototype.getIdentifiers = function () {
        return [];
    };
    JQLExpressionBinding.prototype.bind = function (value) {
        this.bindingValue = value;
        return this;
    };
    JQLExpressionBinding.prototype.unbind = function () {
        this.bindingValue = undefined;
        return this;
    };
    JQLExpressionBinding.prototype.compute = function (context) {
        if (undefined !== this.bindingValue) {
            return this.bindingValue;
        }
        else {
            throw new Error("Failed to compute binding: Binding " + this.bindingName + " is not binded!");
        }
    };
    JQLExpressionBinding.prototype.toString = function () {
        return ":" + this.bindingName;
    };
    return JQLExpressionBinding;
}(JQLExpression));
var JQLExpressionBoolean = (function (_super) {
    __extends(JQLExpressionBoolean, _super);
    function JQLExpressionBoolean(token) {
        var _this = _super.call(this) || this;
        _this.value = token.value;
        return _this;
    }
    JQLExpressionBoolean.prototype.getExpressionType = function () {
        return EJQL_LEXER_EXPRESSION_TYPES.BOOLEAN;
    };
    JQLExpressionBoolean.prototype.getBindings = function () {
        return [];
    };
    JQLExpressionBoolean.prototype.getIdentifiers = function () {
        return [];
    };
    JQLExpressionBoolean.prototype.getFunctions = function () {
        return [];
    };
    JQLExpressionBoolean.prototype.compute = function (context) {
        return this.value;
    };
    JQLExpressionBoolean.prototype.toString = function () {
        return String(this.value);
    };
    return JQLExpressionBoolean;
}(JQLExpression));
var JQLExpressionFunctionCall = (function (_super) {
    __extends(JQLExpressionFunctionCall, _super);
    function JQLExpressionFunctionCall(token) {
        var _this = _super.call(this) || this;
        _this.arguments = [];
        _this.database = null;
        _this.functionName = token.function_name;
        for (var i = 0, len = token.arguments.length; i < len; i++) {
            _this.arguments.push(JQLLexerFactory.create(token.arguments[i]));
        }
        return _this;
    }
    JQLExpressionFunctionCall.prototype.getExpressionType = function () {
        return EJQL_LEXER_EXPRESSION_TYPES.FUNCTION_CALL;
    };
    JQLExpressionFunctionCall.prototype.getFunctionName = function () {
        return this.functionName;
    };
    JQLExpressionFunctionCall.prototype.getArguments = function () {
        return this.arguments;
    };
    JQLExpressionFunctionCall.prototype.getBindings = function () {
        var result = [];
        for (var argI = 0, numArgs = this.arguments.length; argI < numArgs; argI++) {
            for (var i = 0, bindings = this.arguments[argI].getBindings(), len = bindings.length; i < len; i++) {
                result.push(bindings[i]);
            }
        }
        return result;
    };
    JQLExpressionFunctionCall.prototype.getFunctions = function () {
        var result = [this];
        for (var argI = 0, numArgs = this.arguments.length; argI < numArgs; argI++) {
            for (var i = 0, functions = this.arguments[argI].getFunctions(), len = functions.length; i < len; i++) {
                result.push(functions[i]);
            }
        }
        return result;
    };
    JQLExpressionFunctionCall.prototype.getIdentifiers = function () {
        var result = [];
        for (var argI = 0, numArgs = this.arguments.length; argI < numArgs; argI++) {
            for (var i = 0, identifiers = this.arguments[argI].getIdentifiers(), len = identifiers.length; i < len; i++) {
                result.push(identifiers[i]);
            }
        }
        return result;
    };
    JQLExpressionFunctionCall.prototype.withDatabase = function (database) {
        this.database = database || null;
        return this;
    };
    JQLExpressionFunctionCall.prototype.compute = function (context) {
        if (this.database) {
            var computedArgs = [];
            for (var i = 0, len = this.arguments.length; i < len; i++) {
                computedArgs.push(this.arguments[i].compute(context));
            }
            return this.database.callFunction(this.functionName, computedArgs);
        }
        else {
            throw new Error("Failed to call function " + JSON.stringify(this.functionName) + ": Database not binded to function!");
        }
    };
    JQLExpressionFunctionCall.prototype.toString = function () {
        var result = this.functionName + '(';
        for (var i = 0, len = this.arguments.length; i < len; i++) {
            result += (i === 0 ? '' : ', ') + this.arguments[i].toString();
        }
        return result + ')';
    };
    return JQLExpressionFunctionCall;
}(JQLExpression));
var JQLExpressionGroup = (function (_super) {
    __extends(JQLExpressionGroup, _super);
    function JQLExpressionGroup(token) {
        var _this = _super.call(this) || this;
        _this.expression = JQLLexerFactory.create(token.expression);
        return _this;
    }
    JQLExpressionGroup.prototype.getExpressionType = function () {
        return EJQL_LEXER_EXPRESSION_TYPES.GROUP;
    };
    JQLExpressionGroup.prototype.getBindings = function () {
        return this.expression.getBindings();
    };
    JQLExpressionGroup.prototype.getFunctions = function () {
        return this.expression.getFunctions();
    };
    JQLExpressionGroup.prototype.getIdentifiers = function () {
        return this.expression.getIdentifiers();
    };
    JQLExpressionGroup.prototype.compute = function (context) {
        return this.expression.compute(context);
    };
    JQLExpressionGroup.prototype.toString = function () {
        return '(' + this.expression.toString() + ')';
    };
    return JQLExpressionGroup;
}(JQLExpression));
var JQLExpressionIdentifier = (function (_super) {
    __extends(JQLExpressionIdentifier, _super);
    function JQLExpressionIdentifier(token) {
        var _this = _super.call(this) || this;
        _this.identifierName = token.name;
        return _this;
    }
    JQLExpressionIdentifier.prototype.getExpressionType = function () {
        return EJQL_LEXER_EXPRESSION_TYPES.IDENTIFIER;
    };
    JQLExpressionIdentifier.prototype.getIdentifierName = function () {
        return this.identifierName;
    };
    JQLExpressionIdentifier.prototype.getBindings = function () {
        return [];
    };
    JQLExpressionIdentifier.prototype.getFunctions = function () {
        return [];
    };
    JQLExpressionIdentifier.prototype.getIdentifiers = function () {
        return [this];
    };
    JQLExpressionIdentifier.prototype.compute = function (context) {
        return context.getColumnValue(this.identifierName);
    };
    JQLExpressionIdentifier.prototype.toString = function () {
        return this.identifierName;
    };
    return JQLExpressionIdentifier;
}(JQLExpression));
var JQLExpressionLogical = (function (_super) {
    __extends(JQLExpressionLogical, _super);
    function JQLExpressionLogical(token) {
        var _this = _super.call(this) || this;
        _this.left = JQLLexerFactory.create(token.left);
        _this.right = JQLLexerFactory.create(token.right);
        return _this;
    }
    JQLExpressionLogical.prototype.getExpressionType = function () {
        return EJQL_LEXER_EXPRESSION_TYPES.LOGICAL;
    };
    JQLExpressionLogical.prototype.getLeftOperand = function () {
        return this.left;
    };
    JQLExpressionLogical.prototype.getRightOperand = function () {
        return this.right;
    };
    JQLExpressionLogical.prototype.getBindings = function () {
        var result = [];
        for (var i = 0, bindings = this.left.getBindings(), len = bindings.length; i < len; i++) {
            result.push(bindings[i]);
        }
        for (var i = 0, bindings = this.right.getBindings(), len = bindings.length; i < len; i++) {
            result.push(bindings[i]);
        }
        return result;
    };
    JQLExpressionLogical.prototype.getFunctions = function () {
        var result = [];
        for (var i = 0, functions = this.left.getFunctions(), len = functions.length; i < len; i++) {
            result.push(functions[i]);
        }
        for (var i = 0, functions = this.right.getFunctions(), len = functions.length; i < len; i++) {
            result.push(functions[i]);
        }
        return result;
    };
    JQLExpressionLogical.prototype.getIdentifiers = function () {
        var result = [];
        for (var i = 0, identifiers = this.left.getIdentifiers(), len = identifiers.length; i < len; i++) {
            result.push(identifiers[i]);
        }
        for (var i = 0, identifiers = this.right.getIdentifiers(), len = identifiers.length; i < len; i++) {
            result.push(identifiers[i]);
        }
        return result;
    };
    return JQLExpressionLogical;
}(JQLExpression));
var JQLExpressionLogicalOr = (function (_super) {
    __extends(JQLExpressionLogicalOr, _super);
    function JQLExpressionLogicalOr() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionLogicalOr.prototype.getOperator = function () {
        return EJQL_LEXER_OPERATOR_LOGICAL_TYPE.OR;
    };
    JQLExpressionLogicalOr.prototype.compute = function (context) {
        return !!(this.left.compute(context) || this.right.compute(context));
    };
    JQLExpressionLogicalOr.prototype.toString = function () {
        return this.left.toString() + " or " + this.right.toString();
    };
    return JQLExpressionLogicalOr;
}(JQLExpressionLogical));
var JQLExpressionLogicalAnd = (function (_super) {
    __extends(JQLExpressionLogicalAnd, _super);
    function JQLExpressionLogicalAnd() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionLogicalAnd.prototype.getOperator = function () {
        return EJQL_LEXER_OPERATOR_LOGICAL_TYPE.AND;
    };
    JQLExpressionLogicalAnd.prototype.compute = function (context) {
        return !!(this.left.compute(context) && this.right.compute(context));
    };
    JQLExpressionLogicalAnd.prototype.toString = function () {
        return this.left.toString() + " and " + this.right.toString();
    };
    return JQLExpressionLogicalAnd;
}(JQLExpressionLogical));
var JQLExpressionLogicalEquals = (function (_super) {
    __extends(JQLExpressionLogicalEquals, _super);
    function JQLExpressionLogicalEquals() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionLogicalEquals.prototype.getOperator = function () {
        return EJQL_LEXER_OPERATOR_COMPARISION_TYPE.EQUALS;
    };
    JQLExpressionLogicalEquals.prototype.compute = function (context) {
        var computedLeft = this.left.compute(context), computedRight = this.right.compute(context);
        if ((computedLeft === null || computedRight === null)) {
            return null;
        }
        if (!isNaN(computedLeft) && !isNaN(computedRight)) {
            return Number(computedLeft) != Number(computedRight);
        }
        return computedLeft == computedRight || JQLUtils.compareAsStrings(computedLeft, computedRight) === 0;
    };
    JQLExpressionLogicalEquals.prototype.toString = function () {
        return this.left.toString() + " = " + this.right.toString();
    };
    return JQLExpressionLogicalEquals;
}(JQLExpressionLogical));
var JQLExpressionLogicalDifferent = (function (_super) {
    __extends(JQLExpressionLogicalDifferent, _super);
    function JQLExpressionLogicalDifferent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionLogicalDifferent.prototype.getOperator = function () {
        return EJQL_LEXER_OPERATOR_COMPARISION_TYPE.EQUALS;
    };
    JQLExpressionLogicalDifferent.prototype.compute = function (context) {
        var computedLeft = this.left.compute(context), computedRight = this.right.compute(context);
        if ((computedLeft === null || computedRight === null)) {
            return null;
        }
        if (!isNaN(computedLeft) && !isNaN(computedRight)) {
            return Number(computedLeft) != Number(computedRight);
        }
        return computedLeft != computedRight || JQLUtils.compareAsStrings(computedLeft, computedRight) !== 0;
    };
    JQLExpressionLogicalDifferent.prototype.toString = function () {
        return this.left.toString() + " <> " + this.right.toString();
    };
    return JQLExpressionLogicalDifferent;
}(JQLExpressionLogical));
var JQLExpressionLogicalLike = (function (_super) {
    __extends(JQLExpressionLogicalLike, _super);
    function JQLExpressionLogicalLike() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionLogicalLike.prototype.getOperator = function () {
        return EJQL_LEXER_OPERATOR_COMPARISION_TYPE.LIKE;
    };
    JQLExpressionLogicalLike.prototype.compute = function (context) {
        return this.like(this.left.compute(context), this.right.compute(context));
    };
    JQLExpressionLogicalLike.prototype.like = function (left, right) {
        if (null === left || null === right) {
            return null;
        }
        var leftStr = JQLUtils.castToString(left), rightStr = JQLUtils.castToString(right), regExp = this.buildRegularExpression(rightStr);
        return regExp.test(leftStr);
    };
    JQLExpressionLogicalLike.prototype.buildRegularExpression = function (str) {
        var regExpStr = "^", ch = "";
        for (var i = 0, len = str.length; i < len; i++) {
            ch = str.charAt(i);
            switch (ch) {
                case "%":
                    regExpStr += "(.*)";
                    break;
                case "\n":
                    regExpStr += "\\n";
                    break;
                case "\r":
                    regExpStr += "\\r";
                    break;
                case "\t":
                    regExpStr += "\\t";
                    break;
                case ".":
                case "-":
                case "[":
                case "]":
                case "(":
                case ")":
                case "?":
                case "!":
                case "^":
                case "$":
                case "\\":
                case "/":
                    regExpStr += ("\\" + ch);
                    break;
                default:
                    regExpStr += ch;
                    break;
            }
        }
        return new RegExp(regExpStr + "$", "i");
    };
    JQLExpressionLogicalLike.prototype.toString = function () {
        return this.left.toString() + " LIKE " + this.right.toString();
    };
    return JQLExpressionLogicalLike;
}(JQLExpressionLogical));
var JQLExpressionLogicalLowerThen = (function (_super) {
    __extends(JQLExpressionLogicalLowerThen, _super);
    function JQLExpressionLogicalLowerThen() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionLogicalLowerThen.prototype.getOperator = function () {
        return EJQL_LEXER_OPERATOR_COMPARISION_TYPE.LT;
    };
    JQLExpressionLogicalLowerThen.prototype.compute = function (context) {
        var computedLeft = this.left.compute(context), computedRight = this.right.compute(context);
        if ((computedLeft === null || computedRight === null)) {
            return null;
        }
        if (!isNaN(computedLeft) && !isNaN(computedRight)) {
            return Number(computedLeft) < Number(computedRight);
        }
        return computedLeft < computedRight || JQLUtils.compareAsStrings(computedLeft, computedRight) > 0;
    };
    JQLExpressionLogicalLowerThen.prototype.toString = function () {
        return this.left.toString() + " < " + this.right.toString();
    };
    return JQLExpressionLogicalLowerThen;
}(JQLExpressionLogical));
var JQLExpressionLogicalLowerThenEquals = (function (_super) {
    __extends(JQLExpressionLogicalLowerThenEquals, _super);
    function JQLExpressionLogicalLowerThenEquals() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionLogicalLowerThenEquals.prototype.getOperator = function () {
        return EJQL_LEXER_OPERATOR_COMPARISION_TYPE.LTE;
    };
    JQLExpressionLogicalLowerThenEquals.prototype.compute = function (context) {
        var computedLeft = this.left.compute(context), computedRight = this.right.compute(context);
        if ((computedLeft === null || computedRight === null)) {
            return null;
        }
        if (!isNaN(computedLeft) && !isNaN(computedRight)) {
            return Number(computedLeft) < Number(computedRight);
        }
        return computedLeft <= computedRight || JQLUtils.compareAsStrings(computedLeft, computedRight) >= 0;
    };
    JQLExpressionLogicalLowerThenEquals.prototype.toString = function () {
        return this.left.toString() + " <= " + this.right.toString();
    };
    return JQLExpressionLogicalLowerThenEquals;
}(JQLExpressionLogical));
var JQLExpressionLogicalGreaterThen = (function (_super) {
    __extends(JQLExpressionLogicalGreaterThen, _super);
    function JQLExpressionLogicalGreaterThen() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionLogicalGreaterThen.prototype.getOperator = function () {
        return EJQL_LEXER_OPERATOR_COMPARISION_TYPE.GT;
    };
    JQLExpressionLogicalGreaterThen.prototype.compute = function (context) {
        var computedLeft = this.left.compute(context), computedRight = this.right.compute(context);
        if ((computedLeft === null || computedRight === null)) {
            return null;
        }
        if (!isNaN(computedLeft) && !isNaN(computedRight)) {
            return Number(computedLeft) > Number(computedRight);
        }
        return computedLeft > computedRight || JQLUtils.compareAsStrings(computedLeft, computedRight) < 0;
    };
    JQLExpressionLogicalGreaterThen.prototype.toString = function () {
        return this.left.toString() + " > " + this.right.toString();
    };
    return JQLExpressionLogicalGreaterThen;
}(JQLExpressionLogical));
var JQLExpressionLogicalGreaterThenEquals = (function (_super) {
    __extends(JQLExpressionLogicalGreaterThenEquals, _super);
    function JQLExpressionLogicalGreaterThenEquals() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionLogicalGreaterThenEquals.prototype.getOperator = function () {
        return EJQL_LEXER_OPERATOR_COMPARISION_TYPE.GTE;
    };
    JQLExpressionLogicalGreaterThenEquals.prototype.compute = function (context) {
        var computedLeft = this.left.compute(context), computedRight = this.right.compute(context);
        if ((computedLeft === null || computedRight === null)) {
            return null;
        }
        if (!isNaN(computedLeft) && !isNaN(computedRight)) {
            return Number(computedLeft) > Number(computedRight);
        }
        return computedLeft >= computedRight || JQLUtils.compareAsStrings(computedLeft, computedRight) <= 0;
    };
    JQLExpressionLogicalGreaterThenEquals.prototype.toString = function () {
        return this.left.toString() + " >= " + this.right.toString();
    };
    return JQLExpressionLogicalGreaterThenEquals;
}(JQLExpressionLogical));
var JQLExpressionMath = (function (_super) {
    __extends(JQLExpressionMath, _super);
    function JQLExpressionMath(token) {
        var _this = _super.call(this) || this;
        _this.left = JQLLexerFactory.create(token.left);
        _this.right = JQLLexerFactory.create(token.right);
        return _this;
    }
    JQLExpressionMath.prototype.getExpressionType = function () {
        return EJQL_LEXER_EXPRESSION_TYPES.MATH;
    };
    JQLExpressionMath.prototype.getLeftOperand = function () {
        return this.left;
    };
    JQLExpressionMath.prototype.getRightOperand = function () {
        return this.right;
    };
    JQLExpressionMath.prototype.getBindings = function () {
        var result = [];
        for (var i = 0, bindings = this.left.getBindings(), len = bindings.length; i < len; i++) {
            result.push(bindings[i]);
        }
        for (var i = 0, bindings = this.right.getBindings(), len = bindings.length; i < len; i++) {
            result.push(bindings[i]);
        }
        return result;
    };
    JQLExpressionMath.prototype.getFunctions = function () {
        var result = [];
        for (var i = 0, functions = this.left.getFunctions(), len = functions.length; i < len; i++) {
            result.push(functions[i]);
        }
        for (var i = 0, functions = this.right.getFunctions(), len = functions.length; i < len; i++) {
            result.push(functions[i]);
        }
        return result;
    };
    JQLExpressionMath.prototype.getIdentifiers = function () {
        var result = [];
        for (var i = 0, identifiers = this.left.getIdentifiers(), len = identifiers.length; i < len; i++) {
            result.push(identifiers[i]);
        }
        for (var i = 0, identifiers = this.right.getIdentifiers(), len = identifiers.length; i < len; i++) {
            result.push(identifiers[i]);
        }
        return result;
    };
    return JQLExpressionMath;
}(JQLExpression));
var JQLExpressionMathAddition = (function (_super) {
    __extends(JQLExpressionMathAddition, _super);
    function JQLExpressionMathAddition() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionMathAddition.prototype.getOperator = function () {
        return EJQL_LEXER_OPERATOR_MATH_TYPE.ADDITION;
    };
    JQLExpressionMathAddition.prototype.compute = function (context) {
        console.warn('TODO: Properly implement "+" operator');
        return Number(this.left.compute(context)) + Number(this.right.compute(context));
    };
    JQLExpressionMathAddition.prototype.toString = function () {
        return this.left.toString() + " + " + this.right.toString();
    };
    return JQLExpressionMathAddition;
}(JQLExpressionMath));
var JQLExpressionMathDifference = (function (_super) {
    __extends(JQLExpressionMathDifference, _super);
    function JQLExpressionMathDifference() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionMathDifference.prototype.getOperator = function () {
        return EJQL_LEXER_OPERATOR_MATH_TYPE.DIFFERENCE;
    };
    JQLExpressionMathDifference.prototype.compute = function (context) {
        console.warn('TODO: Properly implement "-" operator');
        return Number(this.left.compute(context)) - Number(this.right.compute(context));
    };
    JQLExpressionMathDifference.prototype.toString = function () {
        return this.left.toString() + " - " + this.right.toString();
    };
    return JQLExpressionMathDifference;
}(JQLExpressionMath));
var JQLExpressionMathDivision = (function (_super) {
    __extends(JQLExpressionMathDivision, _super);
    function JQLExpressionMathDivision() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionMathDivision.prototype.getOperator = function () {
        return EJQL_LEXER_OPERATOR_MATH_TYPE.DIVISION;
    };
    JQLExpressionMathDivision.prototype.compute = function (context) {
        console.warn('TODO: properly implement "/" operator');
        return Number(this.left.compute(context)) / Number(this.right.compute(context));
    };
    JQLExpressionMathDivision.prototype.toString = function () {
        return this.left.toString() + " / " + this.right.toString();
    };
    return JQLExpressionMathDivision;
}(JQLExpressionMath));
var JQLExpressionMathMultiply = (function (_super) {
    __extends(JQLExpressionMathMultiply, _super);
    function JQLExpressionMathMultiply() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionMathMultiply.prototype.getOperator = function () {
        return EJQL_LEXER_OPERATOR_MATH_TYPE.MULTIPLY;
    };
    JQLExpressionMathMultiply.prototype.compute = function (context) {
        console.warn('TODO: Properly implement "*" operator');
        return Number(this.left.compute(context)) * Number(this.right.compute(context));
    };
    JQLExpressionMathMultiply.prototype.toString = function () {
        return this.left.toString() + " * " + this.right.toString();
    };
    return JQLExpressionMathMultiply;
}(JQLExpressionMath));
var JQLExpressionNull = (function (_super) {
    __extends(JQLExpressionNull, _super);
    function JQLExpressionNull() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionNull.prototype.getExpressionType = function () {
        return EJQL_LEXER_EXPRESSION_TYPES.NULL;
    };
    JQLExpressionNull.prototype.getBindings = function () {
        return [];
    };
    JQLExpressionNull.prototype.getFunctions = function () {
        return [];
    };
    JQLExpressionNull.prototype.getIdentifiers = function () {
        return [];
    };
    JQLExpressionNull.prototype.compute = function (context) {
        return null;
    };
    JQLExpressionNull.prototype.toString = function () {
        return 'null';
    };
    return JQLExpressionNull;
}(JQLExpression));
var JQLExpressionNumber = (function (_super) {
    __extends(JQLExpressionNumber, _super);
    function JQLExpressionNumber(token) {
        var _this = _super.call(this) || this;
        _this.value = token.value;
        return _this;
    }
    JQLExpressionNumber.prototype.getExpressionType = function () {
        return EJQL_LEXER_EXPRESSION_TYPES.NUMBER;
    };
    JQLExpressionNumber.prototype.getBindings = function () {
        return [];
    };
    JQLExpressionNumber.prototype.getFunctions = function () {
        return [];
    };
    JQLExpressionNumber.prototype.getIdentifiers = function () {
        return [];
    };
    JQLExpressionNumber.prototype.compute = function (context) {
        return this.value;
    };
    JQLExpressionNumber.prototype.toString = function () {
        return String(this.value);
    };
    return JQLExpressionNumber;
}(JQLExpression));
var JQLExpressionString = (function (_super) {
    __extends(JQLExpressionString, _super);
    function JQLExpressionString(token) {
        var _this = _super.call(this) || this;
        _this.value = token.value;
        return _this;
    }
    JQLExpressionString.prototype.getExpressionType = function () {
        return EJQL_LEXER_EXPRESSION_TYPES.STRING;
    };
    JQLExpressionString.prototype.getBindings = function () {
        return [];
    };
    JQLExpressionString.prototype.getFunctions = function () {
        return [];
    };
    JQLExpressionString.prototype.getIdentifiers = function () {
        return [];
    };
    JQLExpressionString.prototype.compute = function (context) {
        return this.value;
    };
    JQLExpressionString.prototype.toString = function () {
        return JSON.stringify(this.value);
    };
    return JQLExpressionString;
}(JQLExpression));
var JQLExpressionUnary = (function (_super) {
    __extends(JQLExpressionUnary, _super);
    function JQLExpressionUnary(token) {
        var _this = _super.call(this) || this;
        _this.operand = JQLLexerFactory.create(token.left);
        return _this;
    }
    JQLExpressionUnary.prototype.getExpressionType = function () {
        return EJQL_LEXER_EXPRESSION_TYPES.UNARY;
    };
    JQLExpressionUnary.prototype.getOperand = function () {
        return this.operand;
    };
    JQLExpressionUnary.prototype.getBindings = function () {
        return this.operand.getBindings();
    };
    JQLExpressionUnary.prototype.getFunctions = function () {
        return this.operand.getFunctions();
    };
    JQLExpressionUnary.prototype.getIdentifiers = function () {
        return this.operand.getIdentifiers();
    };
    return JQLExpressionUnary;
}(JQLExpression));
var JQLExpressionUnaryInvert = (function (_super) {
    __extends(JQLExpressionUnaryInvert, _super);
    function JQLExpressionUnaryInvert() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionUnaryInvert.prototype.getOperator = function () {
        return EJQL_LEXER_OPERATOR_UNARY_TYPE.INVERT;
    };
    JQLExpressionUnaryInvert.prototype.compute = function (context) {
        var computedOperand = this.operand.compute(context);
        if (computedOperand === null) {
            return null;
        }
        else if (computedOperand === true) {
            return -1;
        }
        else if (computedOperand === false) {
            return 0;
        }
        else if (isNaN(computedOperand)) {
            return -computedOperand;
        }
        else {
            return 0;
        }
    };
    JQLExpressionUnaryInvert.prototype.toString = function () {
        return "-" + this.operand.toString();
    };
    return JQLExpressionUnaryInvert;
}(JQLExpressionUnary));
var JQLExpressionUnaryNot = (function (_super) {
    __extends(JQLExpressionUnaryNot, _super);
    function JQLExpressionUnaryNot() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLExpressionUnaryNot.prototype.getOperator = function () {
        return EJQL_LEXER_OPERATOR_UNARY_TYPE.NOT;
    };
    JQLExpressionUnaryNot.prototype.compute = function (context) {
        console.warn('TODO: Properly implement "Unary !" operator');
        return !this.operand.compute(context);
    };
    JQLExpressionUnaryNot.prototype.toString = function () {
        return '!' + this.operand.toString();
    };
    return JQLExpressionUnaryNot;
}(JQLExpressionUnary));
var JQLSorterStrategy = (function (_super) {
    __extends(JQLSorterStrategy, _super);
    function JQLSorterStrategy(token) {
        var _this = _super.call(this) || this;
        _this.strategy = token.type;
        return _this;
    }
    JQLSorterStrategy.prototype.getOpcodeType = function () {
        return EJQL_LEXER_OPCODE_TYPES.ORDER_BY_OPTION;
    };
    return JQLSorterStrategy;
}(JQLOpcode));
var JQLSorterStrategyByExpression = (function (_super) {
    __extends(JQLSorterStrategyByExpression, _super);
    function JQLSorterStrategyByExpression(token) {
        var _this = _super.call(this, token) || this;
        _this.expressions = [];
        for (var i = 0, len = token.fields.length; i < len; i++) {
            _this.expressions.push(JQLLexerFactory.create(token.fields[i]));
        }
        return _this;
    }
    JQLSorterStrategyByExpression.prototype.getSortExpressions = function () {
        return this.expressions;
    };
    JQLSorterStrategyByExpression.prototype.isRandom = function () {
        return false;
    };
    return JQLSorterStrategyByExpression;
}(JQLSorterStrategy));
var JQLSorterStrategyRandom = (function (_super) {
    __extends(JQLSorterStrategyRandom, _super);
    function JQLSorterStrategyRandom(token) {
        return _super.call(this, token) || this;
    }
    JQLSorterStrategyRandom.prototype.isRandom = function () {
        return true;
    };
    return JQLSorterStrategyRandom;
}(JQLSorterStrategy));
var JQLSorterExpression = (function (_super) {
    __extends(JQLSorterExpression, _super);
    function JQLSorterExpression(token) {
        var _this = _super.call(this) || this;
        _this.direction = token.direction;
        _this.expression = JQLLexerFactory.create(token.expression);
        return _this;
    }
    JQLSorterExpression.prototype.getOpcodeType = function () {
        return EJQL_LEXER_OPCODE_TYPES.ORDER_BY_EXPRESSION;
    };
    JQLSorterExpression.prototype.getDirection = function () {
        return this.direction;
    };
    JQLSorterExpression.prototype.getExpression = function () {
        return this.expression;
    };
    return JQLSorterExpression;
}(JQLOpcode));
var JQLLimit = (function (_super) {
    __extends(JQLLimit, _super);
    function JQLLimit(token) {
        var _this = _super.call(this) || this;
        _this.limit = token.limit;
        _this.skip = token.skip;
        return _this;
    }
    JQLLimit.prototype.getOpcodeType = function () {
        return EJQL_LEXER_OPCODE_TYPES.LIMIT_OPTION;
    };
    JQLLimit.prototype.getLimit = function () {
        return this.limit;
    };
    JQLLimit.prototype.getSkip = function () {
        return this.skip;
    };
    return JQLLimit;
}(JQLOpcode));
var JQLStatementResult = (function () {
    function JQLStatementResult() {
        this.affectingRows = false;
    }
    JQLStatementResult.prototype.getAffectedRows = function () {
        return this.affectedRows;
    };
    JQLStatementResult.prototype.withAffectedRows = function (affectedRowsCount) {
        this.affectedRows = ~~affectedRowsCount;
        return this;
    };
    JQLStatementResult.prototype.hasRows = function () {
        return false;
    };
    return JQLStatementResult;
}());
var JQLStatementResultSelect = (function (_super) {
    __extends(JQLStatementResultSelect, _super);
    function JQLStatementResultSelect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rows = [];
        return _this;
    }
    JQLStatementResultSelect.prototype.addRows = function (rows) {
        if (rows && rows.length) {
            for (var i = 0, len = rows.length; i < len; i++) {
                this.rows.push(rows[i]);
            }
        }
        return this;
    };
    JQLStatementResultSelect.prototype.hasRows = function () {
        return true;
    };
    JQLStatementResultSelect.prototype.getAffectedRows = function () {
        return this.rows.length;
    };
    JQLStatementResultSelect.prototype.getRows = function () {
        return this.rows;
    };
    JQLStatementResultSelect.prototype.getRowsAsArray = function () {
        if (!this.rows || !this.rows.length) {
            return [];
        }
        var result = [], keys, numKeys, row, v;
        for (var i = 0, len = this.rows.length; i < len; i++) {
            row = [];
            keys = Object.keys(this.rows[i]);
            numKeys = keys.length;
            for (var j = 0; j < numKeys; j++) {
                v = this.rows[i][keys[j]];
                if (undefined === v) {
                    v = null;
                }
                row.push(v);
            }
            result.push(row);
        }
        return result;
    };
    return JQLStatementResultSelect;
}(JQLStatementResult));
var JQLStatementResultInsert = (function (_super) {
    __extends(JQLStatementResultInsert, _super);
    function JQLStatementResultInsert() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLStatementResultInsert.prototype.getLastInsertId = function () {
        return this.lastInsertId;
    };
    JQLStatementResultInsert.prototype.withLastInsertId = function (lastInsertId) {
        this.lastInsertId = lastInsertId;
        return this;
    };
    return JQLStatementResultInsert;
}(JQLStatementResult));
var JQLStatementSelect = (function (_super) {
    __extends(JQLStatementSelect, _super);
    function JQLStatementSelect(token) {
        var _this = _super.call(this, token) || this;
        _this.table = null;
        _this.filter = null;
        _this.sorter = null;
        _this.limit = null;
        _this.union = null;
        _this.previous = null;
        _this.fields = JQLLexerFactory.create(token.fields);
        if (!!token.table) {
            _this.table = JQLLexerFactory.create(token.table);
            if (!!token.where) {
                _this.filter = JQLLexerFactory.create(token.where);
            }
            if (!!token.orderBy) {
                _this.sorter = JQLLexerFactory.create(token.orderBy);
            }
            if (!!token.limit) {
                _this.limit = JQLLexerFactory.create(token.limit);
            }
        }
        if (!!token.union) {
            _this.union = JQLLexerFactory.create(token.union).withPreviousStatement(_this);
        }
        return _this;
    }
    JQLStatementSelect.prototype.isRemote = function () {
        if (this.previous) {
            return this.previous.isRemote();
        }
        else {
            return _super.prototype.isRemote.call(this);
        }
    };
    JQLStatementSelect.prototype.getStatementType = function () {
        return EJQL_LEXER_STATEMENT_TYPES.SELECT;
    };
    JQLStatementSelect.prototype.getFields = function () {
        return this.fields;
    };
    JQLStatementSelect.prototype.getTable = function () {
        return this.table;
    };
    JQLStatementSelect.prototype.getFilter = function () {
        return this.filter;
    };
    JQLStatementSelect.prototype.getSorter = function () {
        return this.sorter;
    };
    JQLStatementSelect.prototype.getLimit = function () {
        return this.limit;
    };
    JQLStatementSelect.prototype.getUnion = function () {
        return this.union;
    };
    JQLStatementSelect.prototype.withPreviousStatement = function (statement) {
        this.previous = statement || null;
        return this;
    };
    JQLStatementSelect.prototype.getBindings = function () {
        var result = [];
        if (null !== this.fields) {
            if (!this.fields.isSelectingAllFields()) {
                for (var specificFields = this.fields, i = 0, fields = specificFields.getFields(), len = fields.length; i < len; i++) {
                    for (var j = 0, bindings = fields[i].getExpression().getBindings(), n = bindings.length; j < n; j++) {
                        result.push(bindings[j]);
                    }
                }
            }
        }
        if (null !== this.filter) {
            for (var bindings = this.filter.getBindings(), i = 0, len = bindings.length; i < len; i++) {
                result.push(bindings[i]);
            }
        }
        if (null !== this.sorter) {
            if (!this.sorter.isRandom()) {
                for (var sorterByExpression = this.sorter, i = 0, expressions = sorterByExpression.getSortExpressions(), len = expressions.length; i < len; i++) {
                    for (var j = 0, bindings = expressions[i].getExpression().getBindings(), n = bindings.length; j < n; j++) {
                        result.push(bindings[i]);
                    }
                }
            }
        }
        return result;
    };
    JQLStatementSelect.prototype.getFunctions = function () {
        var result = [];
        if (null !== this.fields) {
            if (!this.fields.isSelectingAllFields()) {
                for (var specificFields = this.fields, i = 0, fields = specificFields.getFields(), len = fields.length; i < len; i++) {
                    for (var j = 0, functions = fields[i].getExpression().getFunctions(), n = functions.length; j < n; j++) {
                        result.push(functions[j]);
                    }
                }
            }
        }
        if (null !== this.filter) {
            for (var functions = this.filter.getFunctions(), i = 0, len = functions.length; i < len; i++) {
                result.push(functions[i]);
            }
        }
        if (null !== this.sorter) {
            if (!this.sorter.isRandom()) {
                for (var sorterByExpression = this.sorter, i = 0, expressions = sorterByExpression.getSortExpressions(), len = expressions.length; i < len; i++) {
                    for (var j = 0, functions = expressions[i].getExpression().getFunctions(), n = functions.length; j < n; j++) {
                        result.push(functions[i]);
                    }
                }
            }
        }
        return result;
    };
    JQLStatementSelect.prototype.getIdentifiers = function () {
        var result = [];
        if (null !== this.fields) {
            if (!this.fields.isSelectingAllFields()) {
                for (var specificFields = this.fields, i = 0, fields = specificFields.getFields(), len = fields.length; i < len; i++) {
                    for (var j = 0, identifiers = fields[i].getExpression().getIdentifiers(), n = identifiers.length; j < n; j++) {
                        result.push(identifiers[j]);
                    }
                }
            }
        }
        if (null !== this.filter) {
            for (var identifiers = this.filter.getIdentifiers(), i = 0, len = identifiers.length; i < len; i++) {
                result.push(identifiers[i]);
            }
        }
        if (null !== this.sorter) {
            if (!this.sorter.isRandom()) {
                for (var sorterByExpression = this.sorter, i = 0, expressions = sorterByExpression.getSortExpressions(), len = expressions.length; i < len; i++) {
                    for (var j = 0, identifiers = expressions[i].getExpression().getIdentifiers(), n = identifiers.length; j < n; j++) {
                        result.push(identifiers[j]);
                    }
                }
            }
        }
        return result;
    };
    return JQLStatementSelect;
}(JQLStatement));
var JQLStatementSelectField = (function (_super) {
    __extends(JQLStatementSelectField, _super);
    function JQLStatementSelectField(token) {
        var _this = _super.call(this) || this;
        _this.literal = null;
        _this.literal = token.literal;
        _this.expression = JQLLexerFactory.create(token.expression);
        return _this;
    }
    JQLStatementSelectField.prototype.getOpcodeType = function () {
        return EJQL_LEXER_OPCODE_TYPES.FIELD;
    };
    JQLStatementSelectField.prototype.getLiteral = function () {
        return this.literal;
    };
    JQLStatementSelectField.prototype.getExpression = function () {
        return this.expression;
    };
    return JQLStatementSelectField;
}(JQLOpcode));
var JQLStatementSelectFieldsList = (function (_super) {
    __extends(JQLStatementSelectFieldsList, _super);
    function JQLStatementSelectFieldsList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JQLStatementSelectFieldsList.prototype.getOpcodeType = function () {
        return EJQL_LEXER_OPCODE_TYPES.FIELDS_LIST;
    };
    return JQLStatementSelectFieldsList;
}(JQLOpcode));
var JQLStatementSelectFieldsListAll = (function (_super) {
    __extends(JQLStatementSelectFieldsListAll, _super);
    function JQLStatementSelectFieldsListAll(lexerToken) {
        return _super.call(this) || this;
    }
    JQLStatementSelectFieldsListAll.prototype.isSelectingAllFields = function () {
        return true;
    };
    return JQLStatementSelectFieldsListAll;
}(JQLStatementSelectFieldsList));
var JQLStatementSelectFieldsListSpecific = (function (_super) {
    __extends(JQLStatementSelectFieldsListSpecific, _super);
    function JQLStatementSelectFieldsListSpecific(token) {
        var _this = _super.call(this) || this;
        _this.fields = [];
        for (var i = 0, len = token.fields.length; i < len; i++) {
            _this.fields.push(JQLLexerFactory.create(token.fields[i]));
        }
        return _this;
    }
    JQLStatementSelectFieldsListSpecific.prototype.getFields = function () {
        return this.fields;
    };
    JQLStatementSelectFieldsListSpecific.prototype.isSelectingAllFields = function () {
        return false;
    };
    return JQLStatementSelectFieldsListSpecific;
}(JQLStatementSelectFieldsList));
var JQLStatementInsert = (function (_super) {
    __extends(JQLStatementInsert, _super);
    function JQLStatementInsert(token) {
        var _this = _super.call(this, token) || this;
        _this.fields = [];
        _this.table = JQLLexerFactory.create(token.table);
        for (var i = 0, len = token.fields.length; i < len; i++) {
            _this.fields.push(JQLLexerFactory.create(token.fields[i]));
        }
        return _this;
    }
    JQLStatementInsert.prototype.getStatementType = function () {
        return EJQL_LEXER_STATEMENT_TYPES.INSERT;
    };
    JQLStatementInsert.prototype.getTable = function () {
        return this.table;
    };
    JQLStatementInsert.prototype.getFields = function () {
        return this.fields;
    };
    JQLStatementInsert.prototype.getBindings = function () {
        var result = [];
        for (var i = 0, len = this.fields.length; i < len; i++) {
            for (var j = 0, bindings = this.fields[i].getExpression().getBindings(), n = bindings.length; j < n; j++) {
                result.push(bindings[j]);
            }
        }
        return result;
    };
    JQLStatementInsert.prototype.getFunctions = function () {
        var result = [];
        for (var i = 0, len = this.fields.length; i < len; i++) {
            for (var j = 0, functions = this.fields[i].getExpression().getFunctions(), n = functions.length; j < n; j++) {
                result.push(functions[j]);
            }
        }
        return result;
    };
    JQLStatementInsert.prototype.getIdentifiers = function () {
        var result = [];
        for (var i = 0, len = this.fields.length; i < len; i++) {
            for (var j = 0, identifiers = this.fields[i].getExpression().getIdentifiers(), n = identifiers.length; j < n; j++) {
                result.push(identifiers[j]);
            }
        }
        return result;
    };
    return JQLStatementInsert;
}(JQLStatement));
var JQLStatementUpdate = (function (_super) {
    __extends(JQLStatementUpdate, _super);
    function JQLStatementUpdate(token) {
        var _this = _super.call(this, token) || this;
        _this.fields = [];
        _this.filter = null;
        _this.limit = null;
        _this.sorter = null;
        _this.timer = null;
        _this.table = JQLLexerFactory.create(token.table);
        if (!!token.delayed) {
            _this.timer = JQLLexerFactory.create(token.delayed);
        }
        for (var i = 0, len = token.fields.length; i < len; i++) {
            _this.fields.push(JQLLexerFactory.create(token.fields[i]));
        }
        if (!!token.where) {
            _this.filter = JQLLexerFactory.create(token.where);
        }
        if (!!token.limit) {
            _this.limit = JQLLexerFactory.create(token.limit);
        }
        if (!!token.orderBy) {
            _this.sorter = JQLLexerFactory.create(token.orderBy);
        }
        return _this;
    }
    JQLStatementUpdate.prototype.getStatementType = function () {
        return EJQL_LEXER_STATEMENT_TYPES.UPDATE;
    };
    JQLStatementUpdate.prototype.getTimer = function () {
        return this.timer;
    };
    JQLStatementUpdate.prototype.getTable = function () {
        return this.table;
    };
    JQLStatementUpdate.prototype.getFields = function () {
        return this.fields;
    };
    JQLStatementUpdate.prototype.getFilter = function () {
        return this.filter;
    };
    JQLStatementUpdate.prototype.getSorter = function () {
        return this.sorter;
    };
    JQLStatementUpdate.prototype.getLimit = function () {
        return this.limit;
    };
    JQLStatementUpdate.prototype.getBindings = function () {
        var result = [];
        for (var i = 0, len = this.fields.length; i < len; i++) {
            for (var j = 0, bindings = this.fields[i].getExpression().getBindings(), n = bindings.length; j < n; j++) {
                result.push(bindings[j]);
            }
        }
        if (!!this.filter) {
            for (var i = 0, bindings = this.filter.getBindings(), len = bindings.length; i < len; i++) {
                result.push(bindings[i]);
            }
        }
        if (!!this.sorter) {
            if (!this.sorter.isRandom()) {
                for (var sorterByExpression = this.sorter, i = 0, expressions = sorterByExpression.getSortExpressions(), len = expressions.length; i < len; i++) {
                    for (var j = 0, bindings = expressions[i].getExpression().getBindings(), n = bindings.length; j < n; j++) {
                        result.push(bindings[i]);
                    }
                }
            }
        }
        return result;
    };
    JQLStatementUpdate.prototype.getFunctions = function () {
        var result = [];
        for (var i = 0, len = this.fields.length; i < len; i++) {
            for (var j = 0, functions = this.fields[i].getExpression().getFunctions(), n = functions.length; j < n; j++) {
                result.push(functions[j]);
            }
        }
        if (!!this.filter) {
            for (var i = 0, functions = this.filter.getFunctions(), len = functions.length; i < len; i++) {
                result.push(functions[i]);
            }
        }
        if (!!this.sorter) {
            if (!this.sorter.isRandom()) {
                for (var sorterByExpression = this.sorter, i = 0, expressions = sorterByExpression.getSortExpressions(), len = expressions.length; i < len; i++) {
                    for (var j = 0, functions = expressions[i].getExpression().getFunctions(), n = functions.length; j < n; j++) {
                        result.push(functions[i]);
                    }
                }
            }
        }
        return result;
    };
    JQLStatementUpdate.prototype.getIdentifiers = function () {
        var result = [];
        for (var i = 0, len = this.fields.length; i < len; i++) {
            for (var j = 0, identifiers = this.fields[i].getExpression().getIdentifiers(), n = identifiers.length; j < n; j++) {
                result.push(identifiers[j]);
            }
        }
        if (!!this.filter) {
            for (var i = 0, identifiers = this.filter.getIdentifiers(), len = identifiers.length; i < len; i++) {
                result.push(identifiers[i]);
            }
        }
        if (null !== this.sorter) {
            if (!this.sorter.isRandom()) {
                for (var sorterByExpression = this.sorter, i = 0, expressions = sorterByExpression.getSortExpressions(), len = expressions.length; i < len; i++) {
                    for (var j = 0, identifiers = expressions[i].getExpression().getIdentifiers(), n = identifiers.length; j < n; j++) {
                        result.push(identifiers[j]);
                    }
                }
            }
        }
        return result;
    };
    return JQLStatementUpdate;
}(JQLStatement));
var JQLStatementUpdateField = (function (_super) {
    __extends(JQLStatementUpdateField, _super);
    function JQLStatementUpdateField(token) {
        var _this = _super.call(this) || this;
        _this.name = token.name;
        _this.expression = JQLLexerFactory.create(token.expression);
        return _this;
    }
    JQLStatementUpdateField.prototype.getOpcodeType = function () {
        return EJQL_LEXER_OPCODE_TYPES.UPDATE_FIELD;
    };
    JQLStatementUpdateField.prototype.getFieldName = function () {
        return this.name;
    };
    JQLStatementUpdateField.prototype.getExpression = function () {
        return this.expression;
    };
    return JQLStatementUpdateField;
}(JQLOpcode));
var JQLStatementUpdateDelayedOption = (function (_super) {
    __extends(JQLStatementUpdateDelayedOption, _super);
    function JQLStatementUpdateDelayedOption(token) {
        var _this = _super.call(this) || this;
        _this.timer = 'number' === typeof token.timer
            ? token.timer
            : null;
        return _this;
    }
    JQLStatementUpdateDelayedOption.prototype.getOpcodeType = function () {
        return EJQL_LEXER_OPCODE_TYPES.DELAYED_OPTION;
    };
    JQLStatementUpdateDelayedOption.prototype.getTimerValueInMilliseconds = function () {
        return this.timer;
    };
    return JQLStatementUpdateDelayedOption;
}(JQLOpcode));
var JQLStatementDelete = (function (_super) {
    __extends(JQLStatementDelete, _super);
    function JQLStatementDelete(token) {
        var _this = _super.call(this, token) || this;
        _this.filter = null;
        _this.sorter = null;
        _this.limit = null;
        _this.table = JQLLexerFactory.create(token.table);
        if (!!token.where) {
            _this.filter = JQLLexerFactory.create(token.where);
        }
        if (!!token.orderBy) {
            _this.sorter = JQLLexerFactory.create(token.orderBy);
        }
        if (!!token.limit) {
            _this.limit = JQLLexerFactory.create(token.limit);
        }
        return _this;
    }
    JQLStatementDelete.prototype.getStatementType = function () {
        return EJQL_LEXER_STATEMENT_TYPES.DELETE;
    };
    JQLStatementDelete.prototype.getTable = function () {
        return this.table;
    };
    JQLStatementDelete.prototype.getFilter = function () {
        return this.filter;
    };
    JQLStatementDelete.prototype.getSorter = function () {
        return this.sorter;
    };
    JQLStatementDelete.prototype.getLimit = function () {
        return this.limit;
    };
    JQLStatementDelete.prototype.getBindings = function () {
        var result = [];
        if (!!this.filter) {
            for (var bindings = this.filter.getBindings(), i = 0, len = bindings.length; i < len; i++) {
                result.push(bindings[i]);
            }
        }
        if (!!this.sorter) {
            if (!this.sorter.isRandom()) {
                for (var sorterByExpression = this.sorter, i = 0, expressions = sorterByExpression.getSortExpressions(), len = expressions.length; i < len; i++) {
                    for (var j = 0, bindings = expressions[i].getExpression().getBindings(), n = bindings.length; j < n; j++) {
                        result.push(bindings[i]);
                    }
                }
            }
        }
        return result;
    };
    JQLStatementDelete.prototype.getFunctions = function () {
        var result = [];
        if (null !== this.filter) {
            for (var functions = this.filter.getFunctions(), i = 0, len = functions.length; i < len; i++) {
                result.push(functions[i]);
            }
        }
        if (null !== this.sorter) {
            if (!this.sorter.isRandom()) {
                for (var sorterByExpression = this.sorter, i = 0, expressions = sorterByExpression.getSortExpressions(), len = expressions.length; i < len; i++) {
                    for (var j = 0, functions = expressions[i].getExpression().getFunctions(), n = functions.length; j < n; j++) {
                        result.push(functions[i]);
                    }
                }
            }
        }
        return result;
    };
    JQLStatementDelete.prototype.getIdentifiers = function () {
        var result = [];
        if (null !== this.filter) {
            for (var identifiers = this.filter.getIdentifiers(), i = 0, len = identifiers.length; i < len; i++) {
                result.push(identifiers[i]);
            }
        }
        if (null !== this.sorter) {
            if (!this.sorter.isRandom()) {
                for (var sorterByExpression = this.sorter, i = 0, expressions = sorterByExpression.getSortExpressions(), len = expressions.length; i < len; i++) {
                    for (var j = 0, identifiers = expressions[i].getExpression().getIdentifiers(), n = identifiers.length; j < n; j++) {
                        result.push(identifiers[j]);
                    }
                }
            }
        }
        return result;
    };
    return JQLStatementDelete;
}(JQLStatement));

return {
    Database: JQLDatabase,
    Grammar: JQLGrammar
};

})();