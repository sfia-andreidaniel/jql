/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var JQLGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,27],$V2=[1,15],$V3=[1,26],$V4=[6,28],$V5=[1,42],$V6=[1,50],$V7=[1,51],$V8=[1,43],$V9=[1,44],$Va=[1,45],$Vb=[1,46],$Vc=[1,47],$Vd=[1,49],$Ve=[1,52],$Vf=[6,25],$Vg=[6,25,28],$Vh=[6,21,25],$Vi=[6,21,25,28],$Vj=[1,60],$Vk=[1,61],$Vl=[49,50],$Vm=[1,70],$Vn=[6,15,28],$Vo=[6,15,28,54],$Vp=[1,83],$Vq=[1,86],$Vr=[1,75],$Vs=[1,76],$Vt=[1,77],$Vu=[1,78],$Vv=[1,79],$Vw=[1,80],$Vx=[1,81],$Vy=[1,82],$Vz=[1,84],$VA=[1,85],$VB=[6,15,18,21,25,28,35,51,54,55,62,63,64,65,66,67,68,69,70,71,72,75,81,82],$VC=[6,18,21,25,28,35],$VD=[6,15,18,21,25,28,35,54,55,62,63,64,65,66,67,68,69,70,72,75,81,82],$VE=[1,122],$VF=[1,130],$VG=[1,131],$VH=[6,18,21,25],$VI=[6,15,18,21,25,28,35,54,55,63,64,65,66,75,81,82],$VJ=[6,15,18,21,25,28,35,54,55,63,64,65,66,67,68,69,70,75,81,82],$VK=[54,75],$VL=[6,25,28,54],$VM=[1,139],$VN=[1,140],$VO=[6,18,21,25,35,54];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"JQL":3,"REMOTE":4,"Statement":5,"EOF":6,"SelectStatement":7,"UpdateStatement":8,"InsertStatement":9,"DeleteStatement":10,"SelectSingleRowStatement":11,"SELECT":12,"SelectFieldsList":13,"SelectFromTableStatement":14,"FROM":15,"TableReference":16,"SelectWithOptionalWHEREClause":17,"WHERE":18,"Expression":19,"SelectWithOptionalORDERClause":20,"ORDER":21,"BY":22,"OrderByClause":23,"SelectWithOptionalLIMITClause":24,"LIMIT":25,"LimitClause":26,"SelectStatementWithoutUnion":27,"UNION":28,"UpdateStatementBegin":29,"UPDATE":30,"DelayedClause":31,"DELAYED":32,"NUMBER":33,"UpdateAllRowsStatement":34,"SET":35,"UpdateFieldsList":36,"UpdateWithOptionalWHEREStatement":37,"UpdateWithOptionalORDERStatement":38,"UpdateWithOptionalLIMITStatement":39,"InsertStatementBegin":40,"INSERT":41,"IGNORE":42,"INTO":43,"DeleteAllRowsStatement":44,"DELETE":45,"DeleteWithOptionalWHEREClauseStatement":46,"DeleteWithOptionalORDERClauseStatement":47,"DeleteWithOptionalLIMITClauseStatement":48,"IDENTIFIER":49,"ESCAPED_IDENTIFIER":50,"*":51,"SelectFieldEnumeration":52,"SelectField":53,",":54,"AS":55,"UpdateField":56,"=":57,"BOOLEAN":58,"NULL":59,"STRING":60,"!":61,"-":62,"||":63,"&&":64,"==":65,"~=":66,"<=":67,"<":68,">=":69,">":70,"/":71,"+":72,"FunctionCall":73,"(":74,")":75,"BINDING":76,"FunctionCallArgumentsList":77,"RANDOM":78,"OrderByClauseFieldsList":79,"OrderByField":80,"ASC":81,"DESC":82,"$accept":0,"$end":1},
terminals_: {2:"error",4:"REMOTE",6:"EOF",12:"SELECT",15:"FROM",18:"WHERE",21:"ORDER",22:"BY",25:"LIMIT",28:"UNION",30:"UPDATE",32:"DELAYED",33:"NUMBER",35:"SET",41:"INSERT",42:"IGNORE",43:"INTO",45:"DELETE",49:"IDENTIFIER",50:"ESCAPED_IDENTIFIER",51:"*",54:",",55:"AS",57:"=",58:"BOOLEAN",59:"NULL",60:"STRING",61:"!",62:"-",63:"||",64:"&&",65:"==",66:"~=",67:"<=",68:"<",69:">=",70:">",71:"/",72:"+",74:"(",75:")",76:"BINDING",78:"RANDOM",81:"ASC",82:"DESC"},
productions_: [0,[3,3],[3,2],[5,1],[5,1],[5,1],[5,1],[11,2],[14,3],[17,3],[17,1],[20,4],[20,1],[24,3],[24,1],[27,1],[27,1],[7,1],[7,3],[29,2],[29,1],[31,2],[31,1],[34,4],[37,3],[37,1],[38,4],[38,1],[39,3],[39,1],[8,1],[40,2],[40,1],[9,5],[44,3],[46,3],[46,1],[47,4],[47,1],[48,3],[48,1],[10,1],[16,1],[16,1],[13,1],[13,1],[52,1],[52,3],[53,1],[53,3],[53,3],[36,1],[36,3],[36,3],[56,3],[56,3],[19,1],[19,1],[19,1],[19,1],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,1],[19,3],[19,1],[19,1],[19,1],[73,3],[73,4],[77,1],[77,3],[23,1],[23,1],[79,1],[79,3],[80,2],[80,2],[80,1],[26,1],[26,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                                                                    //js
                                                                    this.$ = $$[$0-1];
                                                                    this.$.remote = true;
                                                                    return this.$;
                                                                    //php AST::trace(302);
                                                               
break;
case 2:

                                                                    //js
                                                                    this.$ = $$[$0-1];
                                                                    this.$.remote = false;
                                                                    return this.$;
                                                                    //php AST::trace(309);
                                                               
break;
case 3:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(317);
                                                               
break;
case 4:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(322);
                                                               
break;
case 5:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(327);
                                                               
break;
case 6:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(332);
                                                               
break;
case 7:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.STATEMENT,
                                                                        type:         AST.STATEMENT_TYPES.SELECT,
                                                                        fields:       $$[$0]
                                                                    };
                                                                    //php AST::trace(344);
                                                               
break;
case 8:

                                                                    //js
                                                                    this.$ = $$[$0-2];
                                                                    this.$.table = $$[$0]
                                                                    //php AST::trace(354);
                                                               
break;
case 9:

                                                                    //js
                                                                    this.$ = $$[$0-2];
                                                                    this.$.where = $$[$0];
                                                                    //php AST::trace(363);
                                                               
break;
case 10:

                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(367);
                                                               
break;
case 11:

                                                                    //js
                                                                    this.$ = $$[$0-3];
                                                                    this.$.orderBy = $$[$0];
                                                                    //php AST::trace(376);
                                                               
break;
case 12:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(381);
                                                               
break;
case 13:

                                                                    //js
                                                                    this.$ = $$[$0-2];
                                                                    this.$.limit = $$[$0];
                                                                    //php AST::trace(390);
                                                               
break;
case 14:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(395);
                                                               
break;
case 15:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(403);
                                                               
break;
case 16:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(408);
                                                               
break;
case 17:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(416);
                                                               
break;
case 18:

                                                                    //js
                                                                    this.$ = $$[$0-2];
                                                                    this.$.union = $$[$0];
                                                                    //php AST::trace(422);
                                                               
break;
case 19:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.STATEMENT,
                                                                        type:         AST.STATEMENT_TYPES.UPDATE,
                                                                        delayed: $$[$0]
                                                                    };
                                                                    //php AST::trace(435);
                                                               
break;
case 20:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.STATEMENT,
                                                                        type:         AST.STATEMENT_TYPES.UPDATE
                                                                    };//php AST::trace(442);
                                                               
break;
case 21:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.OPTION_DELAYED,
                                                                        timer:        AST.parseNumber($$[$0])
                                                                    };
                                                                    //php AST::trace(453);
                                                               
break;
case 22:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.OPTION_DELAYED,
                                                                        timer:        null
                                                                    };
                                                                    //php AST::trace(461);
                                                               
break;
case 23:

                                                                    //js
                                                                    this.$ = $$[$0-3];
                                                                    this.$.table = $$[$0-2];
                                                                    this.$.fields = $$[$0];
                                                                    //php AST::trace(472);
                                                               
break;
case 24:

                                                                    //js
                                                                    this.$ = $$[$0-2];
                                                                    this.$.where = $$[$0];
                                                                    //php AST::trace(481);
                                                               
break;
case 25:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(486);
                                                               
break;
case 26:

                                                                    //js
                                                                    this.$ = $$[$0-3];
                                                                    this.$.orderBy = $$[$0];
                                                                    //php AST::trace(496);
                                                               
break;
case 28:

                                                                    //js
                                                                    this.$ = $$[$0-2];
                                                                    this.$.limit = $$[$0];
                                                                    //php AST::trace(506);
                                                               
break;
case 29:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(511);
                                                               
break;
case 30:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(519);
                                                               
break;
case 31:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.STATEMENT,
                                                                        type:         AST.STATEMENT_TYPES.INSERT,
                                                                        ignoreDuplicates: true
                                                                    };
                                                                    //php AST::trace(531);
                                                               
break;
case 32:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.STATEMENT,
                                                                        type:         AST.STATEMENT_TYPES.INSERT
                                                                    };
                                                                    //php AST::trace(539);
                                                               
break;
case 33:

                                                                    //js
                                                                    this.$ = $$[$0-4];
                                                                    this.$.table = $$[$0-2];
                                                                    this.$.fields = $$[$0];
                                                                    //php AST::trace(550);
                                                               
break;
case 34:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.STATEMENT,
                                                                        type:         AST.STATEMENT_TYPES.DELETE,
                                                                        table:        $$[$0]
                                                                    };
                                                                    //php AST::trace(562);
                                                               
break;
case 35:

                                                                    //js
                                                                    this.$ = $$[$0-2];
                                                                    this.$.where = $$[$0];
                                                                    //php AST::trace(571);
                                                               
break;
case 36:

                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(575);
                                                               
break;
case 37:

                                                                    //js
                                                                    this.$ = $$[$0-3];
                                                                    this.$.orderBy = $$[$0];
                                                                    //php AST::trace(585);
                                                               
break;
case 38:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(590);
                                                               
break;
case 39:

                                                                    //js
                                                                    this.$ = $$[$0-2];
                                                                    this.$.limit = $$[$0];
                                                                    //php AST::trace(600);
                                                               
break;
case 40:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(605);
                                                               
break;
case 41:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(613);
                                                               
break;
case 42:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.TABLE_REFERENCE,
                                                                        name:         $$[$0]
                                                                    };
                                                                    //php AST::trace(624);
                                                               
break;
case 43:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.TABLE_REFERENCE,
                                                                        name:         AST.unescapeIdentifier( $$[$0] )
                                                                    };
                                                                    //php AST::trace(632);
                                                               
break;
case 44:

                                                                    //js
                                                                    this.$ = {
                                                                         op:          AST.TOKEN_TYPES.FIELDS_LIST,
                                                                         type:        AST.FIELD_TYPES.ALL_FIELDS
                                                                    };
                                                                    //php AST::trace(643);
                                                               
break;
case 45:

                                                                    //js
                                                                    this.$ = { op:        AST.TOKEN_TYPES.FIELDS_LIST,
                                                                        type:         AST.FIELD_TYPES.SPECIFIC_FIELDS,
                                                                        fields:       $$[$0]
                                                                    };
                                                                    //php AST::trace(651);
                                                               
break;
case 46:

                                                                    //js
                                                                    this.$ = [ $$[$0] ];
                                                                    //php AST::trace(659);
                                                               
break;
case 47:

                                                                    //js
                                                                    this.$ = $$[$0-2].concat($$[$0]);
                                                                    //php AST::trace(664);
                                                               
break;
case 48:

                                                                    //js
                                                                    this.$ = {
                                                                         op:          AST.TOKEN_TYPES.FIELD,
                                                                         literal:     AST.createFieldAliasFromExpression($$[$0]),
                                                                         expression:  $$[$0]
                                                                     };
                                                                    //php AST::trace(676);
                                                               
break;
case 49:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.FIELD,
                                                                        literal:      $$[$0],
                                                                        expression:   $$[$0-2]
                                                                    };
                                                                    //php AST::trace(685);
                                                               
break;
case 50:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.FIELD,
                                                                        literal:      AST.unescapeIdentifier($$[$0]),
                                                                        expression:   $$[$0-2]
                                                                    };
                                                                    //php AST::trace(694);
                                                               
break;
case 51:

                                                                    //js
                                                                    this.$ = [ $$[$0] ];
                                                                    //php AST::trace(702);
                                                               
break;
case 52:

                                                                    //js
                                                                    this.$ = $$[$0-2].concat($$[$0]);
                                                                    //php AST::trace(707);
                                                               
break;
case 53:

                                                                    //js
                                                                    this.$ = $$[$0-2].concat($$[$0]);
                                                                    //php AST::trace(712);
                                                               
break;
case 54:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.UPDATE_FIELD,
                                                                        name:         $$[$0-2],
                                                                        expression:   $$[$0]
                                                                    };
                                                                    //php AST::trace(724);
                                                               
break;
case 55:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.UPDATE_FIELD,
                                                                        name:         AST.unescapeIdentifier($$[$0-2]),
                                                                        expression:   $$[$0]
                                                                    };
                                                                    //php AST::trace(733);
                                                               
break;
case 56:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.NUMBER,
                                                                        value:        AST.parseNumber( $$[$0] )
                                                                    };
                                                                    //php AST::trace(745);
                                                               
break;
case 57:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.BOOLEAN,
                                                                        value:        AST.parseBoolean( $$[$0] )
                                                                    };
                                                                    //php AST::trace(754);
                                                               
break;
case 58:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.NULL
                                                                    };
                                                                    //php AST::trace(762);
                                                               
break;
case 59:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.STRING,
                                                                        value:        AST.parseString( $$[$0] )
                                                                    };
                                                                    //php AST::trace(771);
                                                               
break;
case 60:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.UNARY,
                                                                        operator:     AST.OPERATOR.NOT,
                                                                        left:         $$[$0]
                                                                    };
                                                                    //php AST::trace(782);
                                                               
break;
case 61:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.UNARY,
                                                                        operator:     AST.OPERATOR.INVERT,
                                                                        left:         $$[$0]
                                                                    };
                                                                    //php AST::trace(792);
                                                               
break;
case 62:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.OR,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                                    //php AST::trace(804);
                                                               
break;
case 63:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.AND,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                                    //php AST::trace(815);
                                                               
break;
case 64:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.EQUALS,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                                    //php AST::trace(827);
                                                               
break;
case 65:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.LIKE,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                                    //php AST::trace(838);
                                                               
break;
case 66:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.LTE,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                                    //php AST::trace(849);
                                                               
break;
case 67:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.LT,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                                    //php AST::trace(860);
                                                               
break;
case 68:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.GTE,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                                    //php AST::trace(871);
                                                               
break;
case 69:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.LOGICAL,
                                                                        operator:     AST.OPERATOR.GT,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                                    //php AST::trace(882);
                                                               
break;
case 70:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.MATH,
                                                                        operator:     AST.OPERATOR.MULTIPLY,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                                    //php AST::trace(894);
                                                               
break;
case 71:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.MATH,
                                                                        operand:      AST.OPERATOR.DIVISION,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                                    //php AST::trace(905);
                                                               
break;
case 72:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.MATH,
                                                                        operator:     AST.OPERATOR.ADDITION,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                                    //php AST::trace(916);
                                                               
break;
case 73:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.MATH,
                                                                        operator:     AST.OPERATOR.DIFFERENCE,
                                                                        left:         $$[$0-2],
                                                                        right:        $$[$0]
                                                                    };
                                                                    //php AST::trace(927);
                                                               
break;
case 74:

                                                                    //js
                                                                    this.$ = $$[$0];
                                                                    //php AST::trace(932);
                                                               
break;
case 75:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.GROUP,
                                                                        expression:   $$[$0-1]
                                                                    };
                                                                    //php AST::trace(941);
                                                               
break;
case 76:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.IDENTIFIER,
                                                                        name:         $$[$0]
                                                                    };
                                                                    //php AST::trace(950);
                                                               
break;
case 77:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.IDENTIFIER,
                                                                        name:         AST.unescapeIdentifier($$[$0])
                                                                    };
                                                                    //php AST::trace(959);
                                                               
break;
case 78:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.BINDING,
                                                                        name:         AST.unescapeBindingName($$[$0])
                                                                    };
                                                                    //php AST::trace(968);
                                                               
break;
case 79:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.FUNCTION_CALL,
                                                                        function_name: $$[$0-2],
                                                                        arguments:    []
                                                                    };
                                                                    //php AST::trace(981);
                                                               
break;
case 80:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.EXPRESSION,
                                                                        type:         AST.EXPRESSION.FUNCTION_CALL,
                                                                        function_name: $$[$0-3],
                                                                        arguments:    $$[$0-1]
                                                                    };
                                                                    //php AST::trace(991);
                                                               
break;
case 81:

                                                                    //js
                                                                    this.$ = [ $$[$0] ];
                                                                    //php AST::trace(999);
                                                               
break;
case 82:

                                                                    //js
                                                                    this.$ = $$[$0-2].concat($$[$0]);
                                                                    //php AST::trace(1004);
                                                               
break;
case 83:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.OPTION_ORDERING,
                                                                        type:         AST.ORDERING_STRATEGY.RANDOM
                                                                    };
                                                                    //php AST::trace(1015);
                                                               
break;
case 84:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.OPTION_ORDERING,
                                                                        type:         AST.ORDERING_STRATEGY.ORDERED,
                                                                        fields:       $$[$0]
                                                                    };
                                                                    //php AST::trace(1024);
                                                               
break;
case 85:

                                                                    //js
                                                                    this.$ = [ $$[$0] ];
                                                                    //php AST::trace(1032);
                                                               
break;
case 86:

                                                                    //js
                                                                    this.$ = $$[$0-2].concat($$[$0]);
                                                                    //php AST::trace(1037);
                                                               
break;
case 87:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.ORDER_EXPRESSION,
                                                                        expression:   $$[$0-1],
                                                                        direction:    AST.ORDER_DIRECTION.ASCENDING
                                                                    };
                                                                    //php AST::trace(1049);
                                                               
break;
case 88:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.ORDER_EXPRESSION,
                                                                        expression:   $$[$0-1],
                                                                        direction:    AST.ORDER_DIRECTION.DESCENDING
                                                                    };
                                                                    //php AST::trace(1059);
                                                               
break;
case 89:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.ORDER_EXPRESSION,
                                                                        expression:   $$[$0],
                                                                        direction:    AST.ORDER_DIRECTION.ASCENDING
                                                                    };
                                                                    //php AST::trace(1068);
                                                               
break;
case 90:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.OPTION_LIMIT,
                                                                        limit:        AST.parseNumber( $$[$0] ),
                                                                        skip:         0
                                                                    };
                                                                    //php AST::trace(1080);
                                                               
break;
case 91:

                                                                    //js
                                                                    this.$ = {
                                                                        op:           AST.TOKEN_TYPES.OPTION_LIMIT,
                                                                        limit:        AST.parseNumber( $$[$0] ),
                                                                        skip:         AST.parseNumber( $$[$0-2] )
                                                                    };
                                                                    //php AST::trace(1089);
                                                               
break;
}
},
table: [{3:1,4:[1,2],5:3,7:4,8:5,9:6,10:7,11:13,12:$V0,14:24,17:21,20:17,24:12,27:8,29:25,30:$V1,34:22,37:19,38:14,39:9,40:10,41:$V2,44:23,45:$V3,46:20,47:16,48:11},{1:[3]},{5:28,7:4,8:5,9:6,10:7,11:13,12:$V0,14:24,17:21,20:17,24:12,27:8,29:25,30:$V1,34:22,37:19,38:14,39:9,40:10,41:$V2,44:23,45:$V3,46:20,47:16,48:11},{6:[1,29]},{6:[2,3],28:[1,30]},{6:[2,4]},{6:[2,5]},{6:[2,6]},o($V4,[2,17]),{6:[2,30]},{43:[1,31]},{6:[2,41]},o($V4,[2,15]),o($V4,[2,16],{15:[1,32]}),{6:[2,29],25:[1,33]},{42:[1,34],43:[2,32]},{6:[2,40],25:[1,35]},o($V4,[2,14],{25:[1,36]}),{13:37,19:41,33:$V5,49:$V6,50:$V7,51:[1,38],52:39,53:40,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},o($Vf,[2,27],{21:[1,53]}),o($Vf,[2,38],{21:[1,54]}),o($Vg,[2,12],{21:[1,55]}),o($Vh,[2,25],{18:[1,56]}),o($Vh,[2,36],{18:[1,57]}),o($Vi,[2,10],{18:[1,58]}),{16:59,49:$Vj,50:$Vk},{15:[1,62]},o($Vl,[2,20],{31:63,32:[1,64]}),{6:[1,65]},{1:[2,2]},{11:13,12:$V0,14:24,17:21,20:17,24:12,27:66},{16:67,49:$Vj,50:$Vk},{16:68,49:$Vj,50:$Vk},{26:69,33:$Vm},{43:[2,31]},{26:71,33:$Vm},{26:72,33:$Vm},o($Vn,[2,7]),o($Vn,[2,44]),o($Vn,[2,45],{54:[1,73]}),o($Vo,[2,46]),o($Vo,[2,48],{51:$Vp,55:[1,74],62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA}),o($VB,[2,56]),o($VB,[2,57]),o($VB,[2,58]),o($VB,[2,59]),{19:87,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:88,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},o($VB,[2,74]),{19:89,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},o($VB,[2,76],{74:[1,90]}),o($VB,[2,77]),o($VB,[2,78]),{22:[1,91]},{22:[1,92]},{22:[1,93]},{19:94,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:95,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:96,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{35:[1,97]},o($VC,[2,42]),o($VC,[2,43]),{16:98,49:$Vj,50:$Vk},o($Vl,[2,19]),o($Vl,[2,22],{33:[1,99]}),{1:[2,1]},o($V4,[2,18]),{35:[1,100]},o([6,18,21,25,28],[2,8]),{6:[2,28]},o($V4,[2,90],{54:[1,101]}),{6:[2,39]},o($V4,[2,13]),{19:41,33:$V5,49:$V6,50:$V7,53:102,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{49:[1,103],50:[1,104]},{19:105,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:106,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:107,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:108,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:109,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:110,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:111,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:112,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:113,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:114,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:115,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:116,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},o($VB,[2,60]),o($VD,[2,61],{51:$Vp,71:$Vz}),{51:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,75:[1,117]},{19:120,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,75:[1,118],76:$Ve,77:119},{19:125,23:121,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve,78:$VE,79:123,80:124},{19:125,23:126,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve,78:$VE,79:123,80:124},{19:125,23:127,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve,78:$VE,79:123,80:124},o($Vh,[2,24],{51:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA}),o($Vh,[2,35],{51:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA}),o($Vi,[2,9],{51:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA}),{36:128,49:$VF,50:$VG,56:129},o($VH,[2,34]),o($Vl,[2,21]),{36:132,49:$VF,50:$VG,56:129},{33:[1,133]},o($Vo,[2,47]),o($Vo,[2,49]),o($Vo,[2,50]),o([6,15,18,21,25,28,35,54,55,63,75,81,82],[2,62],{51:$Vp,62:$Vq,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA}),o([6,15,18,21,25,28,35,54,55,63,64,75,81,82],[2,63],{51:$Vp,62:$Vq,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA}),o($VI,[2,64],{51:$Vp,62:$Vq,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA}),o($VI,[2,65],{51:$Vp,62:$Vq,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA}),o($VJ,[2,66],{51:$Vp,62:$Vq,71:$Vz,72:$VA}),o($VJ,[2,67],{51:$Vp,62:$Vq,71:$Vz,72:$VA}),o($VJ,[2,68],{51:$Vp,62:$Vq,71:$Vz,72:$VA}),o($VJ,[2,69],{51:$Vp,62:$Vq,71:$Vz,72:$VA}),o($VB,[2,70]),o($VB,[2,71]),o($VD,[2,72],{51:$Vp,71:$Vz}),o($VD,[2,73],{51:$Vp,71:$Vz}),o($VB,[2,75]),o($VB,[2,79]),{54:[1,135],75:[1,134]},o($VK,[2,81],{51:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA}),o($Vf,[2,26]),o($Vg,[2,83]),o($Vg,[2,84],{54:[1,136]}),o($VL,[2,85]),o($VL,[2,89],{51:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,81:[1,137],82:[1,138]}),o($Vf,[2,37]),o($Vg,[2,11]),o($VH,[2,23],{35:$VM,54:$VN}),o($VO,[2,51]),{57:[1,141]},{57:[1,142]},{6:[2,33],35:$VM,54:$VN},o($V4,[2,91]),o($VB,[2,80]),{19:143,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:125,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve,80:144},o($VL,[2,87]),o($VL,[2,88]),{49:$VF,50:$VG,56:145},{49:$VF,50:$VG,56:146},{19:147,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},{19:148,33:$V5,49:$V6,50:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,73:48,74:$Vd,76:$Ve},o($VK,[2,82],{51:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA}),o($VL,[2,86]),o($VO,[2,52]),o($VO,[2,53]),o($VO,[2,54],{51:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA}),o($VO,[2,55],{51:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA})],
defaultActions: {5:[2,4],6:[2,5],7:[2,6],9:[2,30],11:[2,41],29:[2,2],34:[2,31],65:[2,1],69:[2,28],71:[2,39]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    // JQL Abstract Syntax Tree
    var AST = {

        STATEMENT_TYPES: {
            SELECT:                'select',
            UPDATE:                'update',
            INSERT:                'insert',
            DELETE:                'delete'
        },

        TOKEN_TYPES: {
            STATEMENT:             'statement',
            TABLE_REFERENCE:       'table_reference',
            EXPRESSION:            'expression',
            FIELDS_LIST:           'fields_list',
            FIELD:                 'field',
            UPDATE_FIELD:          'update_field',
            OPTION_DELAYED:        'delayed_option',
            OPTION_LIMIT:          'limit_option',
            OPTION_ORDERING:       'order_by_option',
            ORDER_EXPRESSION:      'order_by_expression'
        },

        EXPRESSION: {
            NUMBER:                'number',        // 0, 2.123, 2, 231231
            BOOLEAN:               'boolean',       // true, false
            NULL:                  'null',          // null
            STRING:                'string',        // "mumu"
            UNARY:                 'unary',         // !foo, -a
            LOGICAL:               'logical',       // a && b, 2 || true
            MATH:                  'math',          // foo + 3, 2 / 4
            GROUP:                 'group',         // ( 2 + 3 * 6 + sum( '2', 3 ) )
            IDENTIFIER:            'identifier',    // foo
            BINDING:               'binding',       // :foo
            FUNCTION_CALL:         'function_call'  // foo(2, 3, mar(bar + 2) )
        },

        OPERATOR: {

            NOT:                   '!',             // !true, !1, !asd, !"1"
            INVERT:                '-',             // -3, -true, -"asd",

            OR:                    '||',            // a or b, a || b
            AND:                   '&&',            // a && b, a and b

            EQUALS:                '==',            // a == b, 1 == 2
            LIKE:                  '~=',            // a ~= '%foo'

            LTE:                   '<=',            // 3 <= 4
            LT:                    '<',             // 3 <  4
            GTE:                   '>=',            // 4 >= 3
            GT:                    '>',             // 4 > 3

            MULTIPLY:              '*',             // 3 * 4
            DIVISION:              '/',             // 3 / 4

            ADDITION:              '+',             // 3 + 4
            DIFFERENCE:            '-',             // 4 - 3

        },

        ORDERING_STRATEGY: {
            RANDOM:                'random',
            ORDERED:               'ordered'
        },

        ORDER_DIRECTION: {
            ASCENDING:             'asc',
            DESCENDING:            'desc'
        },

        FIELD_TYPES: {
            ALL_FIELDS:            'all',
            SPECIFIC_FIELDS:       'enumeration'
        },

        id: 0,

        createAlias: function( prefix ) {
            AST.id++;
            return ( prefix || 'field_' ) + AST.id;
        },

        unescapeIdentifier: function( escapedIdentifier ) {
            return String( escapedIdentifier || '' ).replace( /^`([\S]+)`$/, '$1' );
        },

        unescapeBindingName: function( bindingName ) {
            return String( bindingName || '' ).replace( /^\:/, '' );
        },

        parseBoolean: function( input ) {

            return String(input || '').toLowerCase() === 'true';

        },

        parseNumber: function( input ) {
            return Number( input );
        },

        parseString: function( input ) {

            if ( 'string' !== typeof input ) {
                throw new Error('Invalid argument: string expected!');
            }

            var strlen = input.length,
                startch = input.charAt(0),
                endch   = input.charAt( strlen - 1 ),
                ch,
                nextch,
                result = '';

            if ( strlen < 2 || startch != endch || ( startch !== "'" && startch !== '"' ) ) {
                throw new Error('Failed to parse string! Please report this bug!');
            }

            for ( var i=1; i < strlen - 1; i++ ) {

                ch = input.charAt(i);

                if ( '\\' === ch ) {

                     nextch = input.charAt(i + 1);

                     switch (nextch) {
                        case "r": // "r"
                            result += "\r";
                            break;
                        case "t": // "t"
                            result += "\t";
                            break;
                        case "n": // "n"
                            result += "\n";
                            break;
                        case "\\": // "\"
                            result += "\\";
                            break;
                        case '':
                            throw new Error('Unexpected string termination!');
                            break;
                        default:
                            result += nextch;
                            break;
                     }

                     i++;

                } else {

                    result += ch;

                }
            }

            return result;
        },

        createFieldAliasFromExpression: function( expression ) {
            switch ( expression.type ) {
                case 'string':
                case 'boolean':
                case 'number':
                    return String( expression.value );
                case 'null':
                    return 'null';
                default:
                    return null;
            }
        }

    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */
break;
case 1:return 33;
break;
case 2:return 33;
break;
case 3:return 58;
break;
case 4:return 59;
break;
case 5:return 60;
break;
case 6:return 60;
break;
case 7:return 12;
break;
case 8:return 30;
break;
case 9:return 41;
break;
case 10:return 45;
break;
case 11:return 4;
break;
case 12:return 15;
break;
case 13:return 18;
break;
case 14:return 25;
break;
case 15:return 28;
break;
case 16:return 55;
break;
case 17:return 35;
break;
case 18:return 32;
break;
case 19:return 21;
break;
case 20:return 22;
break;
case 21:return 78;
break;
case 22:return 81;
break;
case 23:return 81;
break;
case 24:return 82;
break;
case 25:return 82;
break;
case 26:return 42;
break;
case 27:return 43;
break;
case 28:return 74;
break;
case 29:return 75;
break;
case 30:return 51;
break;
case 31:return 71;
break;
case 32:return 72;
break;
case 33:return 62;
break;
case 34:return 61;
break;
case 35:return '!=';
break;
case 36:return 67;
break;
case 37:return 68;
break;
case 38:return 69;
break;
case 39:return 70;
break;
case 40:return 65;
break;
case 41:return 57;
break;
case 42:return '!=';
break;
case 43:return 66;
break;
case 44:return 64;
break;
case 45:return 64;
break;
case 46:return 63;
break;
case 47:return 63;
break;
case 48:return 54;
break;
case 49:return 49;
break;
case 50:return 50;
break;
case 51:return 76;
break;
case 52:return 6;
break;
case 53:return 'INVALID';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[0-9]+\.[0-9]*|[0-9]*\.[0-9]+\b)/i,/^(?:[0-9]+)/i,/^(?:true|false\b)/i,/^(?:null\b)/i,/^(?:"(\\["]|[^"])*")/i,/^(?:'(\\[']|[^'])*')/i,/^(?:select\b)/i,/^(?:update\b)/i,/^(?:insert\b)/i,/^(?:delete\b)/i,/^(?:remote\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:limit\b)/i,/^(?:union\b)/i,/^(?:as\b)/i,/^(?:set\b)/i,/^(?:delayed\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:random\b)/i,/^(?:asc\b)/i,/^(?:ascending\b)/i,/^(?:desc\b)/i,/^(?:descending\b)/i,/^(?:ignore\b)/i,/^(?:into\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:!)/i,/^(?:<>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:~=)/i,/^(?:&&)/i,/^(?:and\b)/i,/^(?:\|\|)/i,/^(?:or\b)/i,/^(?:,)/i,/^(?:[A-Za-z_\$][A-Za-z0-9_]*)/i,/^(?:`[A-Za-z_\$][A-Za-z0-9_]*`)/i,/^(?::[A-Za-z_\$][A-Za-z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = JQLGrammar;
exports.Parser = JQLGrammar.Parser;
exports.parse = function () { return JQLGrammar.parse.apply(JQLGrammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}